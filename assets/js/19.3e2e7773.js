(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{342:function(t,e,a){"use strict";a.r(e);var n=a(33),i=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"三、标量类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、标量类型"}},[t._v("#")]),t._v(" 三、标量类型")]),t._v(" "),a("p",[t._v("本章主要介绍现阶段EasyGQL默认支持的17种标量类型以及如何定义标量类型字段，开发者可以基于EasyGQL框架非常方便的添加新的标量数据类型。")]),t._v(" "),a("h2",{attrs:{id:"_3-1-17种标量类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-17种标量类型"}},[t._v("#")]),t._v(" 3.1 17种标量类型")]),t._v(" "),a("h3",{attrs:{id:"_3-1-1-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-id"}},[t._v("#")]),t._v(" 3.1.1 ID")]),t._v(" "),a("p",[t._v('表示这是一个唯一主键，在EasyGQL中，默认且强制每一个数据对象中，字段"id"的数据类型为“ID“，使用者不可以定义其他字段属性为“ID”，如果对象定义中没有"id"字段，EasyGQL默认会增加该字段。')]),t._v(" "),a("h3",{attrs:{id:"_3-1-2-float"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-float"}},[t._v("#")]),t._v(" 3.1.2 Float")]),t._v(" "),a("p",[t._v("有符号双精度浮点值。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-3-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-boolean"}},[t._v("#")]),t._v(" 3.1.3 Boolean")]),t._v(" "),a("p",[t._v("布尔型数据，True或者False。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-4-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-string"}},[t._v("#")]),t._v(" 3.1.4 String")]),t._v(" "),a("p",[t._v("UTF‐8 字符序列。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-5-int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-5-int"}},[t._v("#")]),t._v(" 3.1.5 Int")]),t._v(" "),a("p",[t._v("有符号32位整数。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-6-long"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-6-long"}},[t._v("#")]),t._v(" 3.1.6 Long")]),t._v(" "),a("p",[t._v("有符号64位整数。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-7-short"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-7-short"}},[t._v("#")]),t._v(" 3.1.7 Short")]),t._v(" "),a("p",[t._v("有符号16位整数。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-8-byte"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-8-byte"}},[t._v("#")]),t._v(" 3.1.8 Byte")]),t._v(" "),a("p",[t._v("字节。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-9-biginteger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-9-biginteger"}},[t._v("#")]),t._v(" 3.1.9 BigInteger")]),t._v(" "),a("p",[t._v("大整形。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-10-bigdecimal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-10-bigdecimal"}},[t._v("#")]),t._v(" 3.1.10 BigDecimal")]),t._v(" "),a("p",[t._v("BigDecimal。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-11-char"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-11-char"}},[t._v("#")]),t._v(" 3.1.11 Char")]),t._v(" "),a("p",[t._v("字符。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-12-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-12-object"}},[t._v("#")]),t._v(" 3.1.12 Object")]),t._v(" "),a("p",[t._v("任意POJO 对象。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-13-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-13-json"}},[t._v("#")]),t._v(" 3.1.13 Json")]),t._v(" "),a("p",[t._v("任意Json字符串。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-14-date"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-14-date"}},[t._v("#")]),t._v(" 3.1.14 Date")]),t._v(" "),a("p",[t._v("格式为yyyy-MM-dd的日期。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-15-datetime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-15-datetime"}},[t._v("#")]),t._v(" 3.1.15 DateTime")]),t._v(" "),a("p",[t._v("ISO_OFFSET_DATE_TIME 格式的时间。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-16-lastupdate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-16-lastupdate"}},[t._v("#")]),t._v(" 3.1.16 LastUpdate")]),t._v(" "),a("p",[t._v("yyyyMMdd HH:mm:ss格式的时间戳，EasyGQL会在每次数据更新时自动更新对象中类型为LastUpdate的字段。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-17-createdat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-17-createdat"}},[t._v("#")]),t._v(" 3.1.17 CreatedAt")]),t._v(" "),a("p",[t._v("yyyyMMdd HH:mm:ss格式的时间戳，EasyGQL会在每次数据新增时自动更新对象中类型为CreatedAt的字段。")]),t._v(" "),a("h2",{attrs:{id:"_3-2-标量类型字段的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-标量类型字段的定义"}},[t._v("#")]),t._v(" 3.2 标量类型字段的定义")]),t._v(" "),a("p",[t._v("在EasyGQL中，一个标量类型的字段，应该具备以下属性：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("属性名")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("默认值")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("是否非空")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("id")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("字段的唯一标识")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("系统会自动赋予每个新增字段一个唯一标识")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("非空")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("name")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("字段的名称")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("非空")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("type")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("字段的类型")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("非空")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("islist")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("是否为列表")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("否")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("非空")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("notnull")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("字段是否非空")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("否")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("非空")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("invisible_roles")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不可查看的角色列表")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("空List")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("否")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("irrevisible_roles")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不可修改的角色列表")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("空List")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("否")])])])]),t._v(" "),a("p",[t._v("在EasyGQL控制台的GraphQL定义中，使用以下API进行标量的定义")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type ScalarField   {\n  contenttype: ContentType\n  defaultvalue: String\n  description: String\n  id: ID\n  invisible_roles: [Role]\n  irrevisible_roles: [Role]\n  islist: Boolean\n  name: String\n  notnull: Boolean\n  type: ScalarType\n}\ntype ScalarField_InsertResult   {\n  id_list: String\n  nodes: [ScalarField]\n}\nmutation {\n  ScalarFieldDestroy(where: ScalarFieldWhereInput): _DeleteResult \n  ScalarFieldUpdate(object: ScalarFieldUpdateInput!, where: ScalarFieldWhereInput): _UpdateResult \n  scalarfieldsInContentType_IDInput(from_id: ID!, reset: Boolean = false, to_id: [ID]!): _NestInputResult \n  scalarfieldsInContentType_NestRemove(from_id: [ID]!, to_id: ID!): _NestRemoveResult \n  scalarfieldsInContentType_ObjectInput(from_id: ID!, reset: Boolean = false, to_object: [ScalarFieldInput]!): _NestInputResult \n}\n\n")])])]),a("p",[t._v("对于标量类型，不能直接定义，必须使用嵌套对象干的添加方法，指定给某一个对象添加标量字段\n以为聊天记录对象，添加具体标量字段为例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('mutation {\n \tscalarfieldsInContentType_ObjectInput(from_id:"5e76ca2c158b0124a8ff7fe8",to_object:[\n  \t{\n \t\tid:"5e76ca2c158b0124a8ff7ff0",   name:"roomname",\n \t\ttype:String,   description:"room name"\n  },{\n  id:"5e76ca2c158b0124a8ff7ff1",  name:"roominfo",\n type:String  , description:" room information"  \n},{\n  id:"5e76ca2c158b0124a8ff7ff2",  name:"members",\n type:Int  , description:" room information" \n }  \n]){\n    inputNestIDList \n}\n}\n')])])]),a("h2",{attrs:{id:"_3-4-标量类型的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-标量类型的扩展"}},[t._v("#")]),t._v(" 3.4 标量类型的扩展")]),t._v(" "),a("p",[t._v("开发人员可以基于EasyGQL,进行快速开发并且快速提供新的标量类型支持,具体实现可以参照LastUpdate标量类型的实现。")]),t._v(" "),a("h3",{attrs:{id:"_3-4-1-继承graphqlscalartype实现标量类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-继承graphqlscalartype实现标量类型"}},[t._v("#")]),t._v(" 3.4.1 继承GraphQLScalarType实现标量类型")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\nimport com.easygql.component.ConfigurationProperties;\nimport graphql.language.StringValue;\nimport graphql.scalars.util.Kit;\nimport graphql.schema.*;\n\nimport java.time.DateTimeException;\nimport java.time.OffsetDateTime;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeParseException;\nimport java.util.function.Function;\n\npublic class LastUpdateScalar extends GraphQLScalarType {\n    public LastUpdateScalar() {\n        super("LastUpdate", "An RFC-3339 compliant timestamp updated when the object changed", new Coercing<OffsetDateTime, String>() {\n            @Override\n            public String serialize(Object input) throws CoercingSerializeException {\n                OffsetDateTime offsetDateTime;\n                if (input instanceof OffsetDateTime) {\n                    offsetDateTime = (OffsetDateTime)input;\n                } else if (input instanceof ZonedDateTime) {\n                    offsetDateTime = ((ZonedDateTime)input).toOffsetDateTime();\n                } else {\n                    if (!(input instanceof String)) {\n                        throw new CoercingSerializeException("Expected something we can convert to \'java.time.OffsetDateTime\' but was \'" + Kit.typeName(input) + "\'.");\n                    }\n\n                    offsetDateTime = this.parseOffsetDateTime(input.toString(), CoercingSerializeException::new);\n                }\n\n                try {\n                    return ConfigurationProperties.getInstance().DEFAULT_DATETIME_FORMAT.format(offsetDateTime);\n                } catch (DateTimeException var4) {\n                    throw new CoercingSerializeException("Unable to turn TemporalAccessor into OffsetDateTime because of : \'" + var4.getMessage() + "\'.");\n                }\n            }\n\n            @Override\n            public OffsetDateTime parseValue(Object input) throws CoercingParseValueException {\n                OffsetDateTime offsetDateTime;\n                if (input instanceof OffsetDateTime) {\n                    offsetDateTime = (OffsetDateTime)input;\n                } else if (input instanceof ZonedDateTime) {\n                    offsetDateTime = ((ZonedDateTime)input).toOffsetDateTime();\n                } else {\n                    if (!(input instanceof String)) {\n                        throw new CoercingParseValueException("Expected a \'String\' but was \'" + Kit.typeName(input) + "\'.");\n                    }\n\n                    offsetDateTime = this.parseOffsetDateTime(input.toString(), CoercingParseValueException::new);\n                }\n\n                return offsetDateTime;\n            }\n\n            @Override\n            public OffsetDateTime parseLiteral(Object input) throws CoercingParseLiteralException {\n                if (!(input instanceof StringValue)) {\n                    throw new CoercingParseLiteralException("Expected AST type \'StringValue\' but was \'" + Kit.typeName(input) + "\'.");\n                } else {\n                    return this.parseOffsetDateTime(((StringValue)input).getValue(), CoercingParseLiteralException::new);\n                }\n            }\n\n            private OffsetDateTime parseOffsetDateTime(String s, Function<String, RuntimeException> exceptionMaker) {\n                try {\n                    return OffsetDateTime.parse(s, ConfigurationProperties.getInstance().DEFAULT_DATETIME_FORMAT);\n                } catch (DateTimeParseException var4) {\n                    throw (RuntimeException)exceptionMaker.apply("Invalid RFC3339 value : \'" + s + "\'. because of : \'" + var4.getMessage() + "\'");\n                }\n            }\n        });\n    }\n    public static final  LastUpdateScalar lastUpdateScalar=new LastUpdateScalar();\n}\n\n\n')])])]),a("h3",{attrs:{id:"_3-4-2-在easygql控制台增加lastupdate标量类型支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-在easygql控制台增加lastupdate标量类型支持"}},[t._v("#")]),t._v(" 3.4.2 在EasyGQL控制台增加LastUpdate标量类型支持")]),t._v(" "),a("p",[t._v("在GraphQLElementGenerator.java的getScalarType方法中，增加具体的类型。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('public static GraphQLScalarType getScalarType(String typeName) {\n    switch (typeName) {\n      case "ID":\n        return Scalars.GraphQLID;\n      case "Float":\n      case "BigDecimal":\n        return Scalars.GraphQLBigDecimal;\n      case "Boolean":\n        return Scalars.GraphQLBoolean;\n      case "String":\n      case "Char":\n      case "Byte":\n        return Scalars.GraphQLString;\n      case "Int":\n      case "Short":\n        return Scalars.GraphQLInt;\n      case "Long":\n      case "BigInteger":\n        return Scalars.GraphQLLong;\n      case "Object":\n        return ExtendedScalars.Object;\n      case "JSON":\n        return ExtendedScalars.Json;\n      case "Date":\n        return ExtendedScalars.Date;\n      case "DateTime":\n        return ExtendedScalars.DateTime;\n      case "Time":\n        return ExtendedScalars.Time;\n      case "URL":\n        return urlType;\n      case "Email":\n        return emailType;\n      case "LastUpdate":\n        return LastUpdateScalar.lastUpdateScalar;\n      case "CreatedAt":\n        return CreatedAtScalar.createdatscalar;\n      default:\n        throw new BusinessException("E10050");\n    }\n  }\n\n')])])]),a("h3",{attrs:{id:"_3-4-3-在最终生成schema的时候，增加lastupdate标量支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-在最终生成schema的时候，增加lastupdate标量支持"}},[t._v("#")]),t._v(" 3.4.3 在最终生成Schema的时候，增加Lastupdate标量支持")]),t._v(" "),a("p",[t._v("在GetTypeRuntimeWiring.java的getScalar方法中，如3.4.2一样，增加标量值。")])])}),[],!1,null,null,null);e.default=i.exports}}]);