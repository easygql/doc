(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{215:function(t,a,e){"use strict";e.r(a);var v=e(0),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"八、触发器（trigger"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八、触发器（trigger"}},[t._v("#")]),t._v(" 八、触发器（Trigger)")]),t._v(" "),e("p",[t._v("trigger主要是基于某一个contenttype的某一个Subscription的事件进行订阅，通过trigger可以非常方便的调用第三方API（比如sendgrid、slack、twillio sms等）从而实现与第三方API集成的目的。")]),t._v(" "),e("h2",{attrs:{id:"_8-1-触发器的架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-触发器的架构"}},[t._v("#")]),t._v(" 8.1 触发器的架构")]),t._v(" "),e("p",[t._v("如下图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/doc/img/trigger_architect.png",alt:"trigger_architect"}})]),t._v(" "),e("h2",{attrs:{id:"_8-2-触发器属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-触发器属性"}},[t._v("#")]),t._v(" 8.2 触发器属性")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("属性")])]),t._v(" "),e("th",[e("strong",[t._v("取值")])]),t._v(" "),e("th",[e("strong",[t._v("备注")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Trigger name")]),t._v(" "),e("td",[t._v("trigger的名字")]),t._v(" "),e("td",[t._v("一个schema中trigger的名字必须唯一")])]),t._v(" "),e("tr",[e("td",[t._v("contenttype")]),t._v(" "),e("td",[t._v("对应contenttype的名字")]),t._v(" "),e("td",[t._v("对应于哪个contenttype的订阅。")])]),t._v(" "),e("tr",[e("td",[t._v("Eventtype")]),t._v(" "),e("td",[t._v("Insert、 update、 remove 、all")]),t._v(" "),e("td",[t._v("订阅的类型")])]),t._v(" "),e("tr",[e("td",[t._v("Where")]),t._v(" "),e("td",[t._v("订阅的过滤条件")]),t._v(" "),e("td",[t._v("对应subscription的where 条件")])]),t._v(" "),e("tr",[e("td",[t._v("changefields")]),t._v(" "),e("td",[t._v("对应对象字段的列表")]),t._v(" "),e("td",[t._v("只有当对应列变了才会触发。")])]),t._v(" "),e("tr",[e("td",[t._v("Headers")]),t._v(" "),e("td",[t._v("一个map对象")]),t._v(" "),e("td",[t._v("表示用于调用第三方API时说附带的http请求头")])]),t._v(" "),e("tr",[e("td",[t._v("Ok_status")]),t._v(" "),e("td",[t._v("2XX开头的某个状态码")]),t._v(" "),e("td",[t._v("表示为请求调用成功，默认为200")])]),t._v(" "),e("tr",[e("td",[t._v("payload")]),t._v(" "),e("td",[t._v("定义trigger调用时的payload")]),t._v(" "),e("td",[t._v("默认为订阅时的返回值。")])]),t._v(" "),e("tr",[e("td",[t._v("Retry_times")]),t._v(" "),e("td",[t._v("整形，重试次数，不得大于10次")]),t._v(" "),e("td")])])]),t._v(" "),e("h3",{attrs:{id:"_8-3-默认payload"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-默认payload"}},[t._v("#")]),t._v(" 8.3 默认payload")]),t._v(" "),e("p",[t._v("假设某个contenttype的定义为如下：")]),t._v(" "),e("div",{staticClass:"language-JSON extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[t._v("type chatroom "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n content"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ID \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("对应的默认payload格式为对应的changeresult的格式：")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[t._v("type chatroomChangeResult "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \neventtype"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" EventType \nnew_val"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" chatroom \nold_val"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" chatroom \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"_8-4-自定义payload"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-自定义payload"}},[t._v("#")]),t._v(" 8.4 自定义payload")]),t._v(" "),e("p",[t._v("用户可以自定义trigger进行调用时payload的格式。自定义的payload为一个key-value的列表。")]),t._v(" "),e("p",[t._v("Key为对应返回值的对象的key值，value为返回值的JSON表述。")]),t._v(" "),e("p",[t._v("用户自定义trigger类型时，可以采用如下方式定义")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("属性")]),t._v(" "),e("th",[t._v("取值")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Key")]),t._v(" "),e("td",[t._v("对应key-value中的key")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("valuetype")]),t._v(" "),e("td",[t._v("枚举值，可以EnumValue，Eventvalue")]),t._v(" "),e("td",[t._v("EnumValue为用户随便定义的某个常量EventValue为用户定义的从默认payload中取值。")])]),t._v(" "),e("tr",[e("td",[t._v("value")]),t._v(" "),e("td",[t._v("对应的EnumValue值或者EventValue值。")]),t._v(" "),e("td",[t._v("比如，“1”为EnumValue值。Eventtype,以及new_val.content表示new_val下的content字段的取值。")])])])]),t._v(" "),e("h2",{attrs:{id:"_8-5-event-对象的缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-5-event-对象的缓存"}},[t._v("#")]),t._v(" 8.5  Event 对象的缓存")]),t._v(" "),e("p",[t._v("EasyGQL会缓存24小时以内的所有Trigger的Event数据，包括产生时间，发送时间，重试次数，并且提供手动重发的功能。EasyGQL会每24小时清空一次前24小时以前产生的Event数据。")]),t._v(" "),e("h2",{attrs:{id:"_8-6支持的数据库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-6支持的数据库"}},[t._v("#")]),t._v(" 8.6支持的数据库")]),t._v(" "),e("p",[t._v("支持rethtinkdb,postgresql,mysql。")])])}),[],!1,null,null,null);a.default=_.exports}}]);