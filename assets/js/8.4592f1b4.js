(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{326:function(e,t,n){"use strict";n.r(t);var a=n(33),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"schemacreate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schemacreate"}},[e._v("#")]),e._v(" SchemaCreate")]),e._v(" "),n("p",[e._v("SchemaCreate接收3个参数：")]),e._v(" "),n("ul",[n("li",[e._v("databasekind 数据库类型")]),e._v(" "),n("li",[e._v("name  schema的名字")]),e._v(" "),n("li",[e._v("description schema的描述\n返回值是SchemaCreate_ThirdOutput，有两个属性：")]),e._v(" "),n("li",[e._v("affected_rows ： 新增Schema的数量")]),e._v(" "),n("li",[e._v("id_list ： 新增Schema的id列表\n例如：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mutation {\n  SchemaCreate(databasekind:PostgreSQL,name:"testschema2",description:"test schema 20200511") {\n    affected_rows\n    id_list\n  }\n}\n')])])]),n("p",[e._v("返回值为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "data": {\n    "SchemaCreate": {\n      "affected_rows": 1,\n      "id_list": [\n        "5eb95beaa7b11b000140bfd3"\n      ]\n    }\n  }\n}\n')])])]),n("h2",{attrs:{id:"schemadestory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schemadestory"}},[e._v("#")]),e._v(" SchemaDestory")]),e._v(" "),n("p",[e._v("SchemaDestory接收一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("where 类型为SchemaWhereInput\n返回值为：")]),e._v(" "),n("li",[e._v("affected_rows，删除的行数\nSchemaWhereInput的定义为：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input SchemaWhereInput   {\n  field_contains:[String]\n  filter: SchemaFieldFilter\n  and:[SchemaWhereInput]\n  not: SchemaWhereInput\n  or:[SchemaWhereInput] \n}\ninput SchemaFieldFilter  {\n  databasekind: DatabaseKind_EnumFilter\n  datasource: DataSourceFieldFilter\n  description: StringFilter\n  enumtypes: EnumTypeListMatch\n  id: IDFilter\n  name: StringFilter\n  objecttypes: ContentTypeListMatch\n  published_history: SchemaMetaDataListMatch\n  published_schema: SchemaMetaDataFieldFilter\n  relations: RelationFieldListMatch\n  status: SchemaStatus_EnumFilter\n  thirdapis: ThirdAPIListMatch\n  triggers: TriggerListMatch\n}\n")])])]),n("p",[e._v("具体标量类型的比较操作符见"),n("RouterLink",{attrs:{to:"/apiinfo/filter.html"}},[e._v("标量类型比较操作符")])],1),e._v(" "),n("p",[e._v("例如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mutation {\n  SchemaDestroy (where:{\n    filter:{\n      id:{\n        eq:"5eba9b9ba7b11b000140bfda"\n\t\t\t}\n    }\n  }) {\n    affected_rows\n  }\n}\n')])])]),n("p",[e._v("返回值为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "data": {\n    "SchemaDestroy": {\n      "affected_rows": 1\n    }\n  }\n}\n')])])]),n("h2",{attrs:{id:"schemapublish"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schemapublish"}},[e._v("#")]),e._v(" SchemaPublish")]),e._v(" "),n("p",[e._v("SchemaPublish是Schema发布的API，他将最新的Schema发布到运行时，这个API接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("schemaid,要发布的Schemaid\n返回的值有：")]),e._v(" "),n("li",[e._v("OperationResult：表示发布成功或失败")])]),e._v(" "),n("p",[e._v("例如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mutation {\n  SchemaPublish(schemaid:"5eba9b9ba7b11b000140bfda") {\n    OperationResult\n  }\n}\n')])])]),n("p",[e._v("返回值为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "data": {\n    "SchemaDestroy": {\n      "OperationResult": true\n    }\n  }\n}\n')])])]),n("h2",{attrs:{id:"schemarestart"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schemarestart"}},[e._v("#")]),e._v(" SchemaRestart")]),e._v(" "),n("p",[e._v("SchemaRestart是Schema重启的API，这个API接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("schemaid,要重启的Schemaid\n返回的值有：")]),e._v(" "),n("li",[e._v("OperationResult：表示重启成功或失败")])]),e._v(" "),n("p",[e._v("例如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mutation {\n  SchemaRestart(schemaid:"5eba9b9ba7b11b000140bfda") {\n    OperationResult\n  }\n}\n')])])]),n("p",[e._v("返回值为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "data": {\n    "SchemaRestart": {\n      "OperationResult": true\n    }\n  }\n}\n')])])]),n("h2",{attrs:{id:"schemastart"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schemastart"}},[e._v("#")]),e._v(" SchemaStart")]),e._v(" "),n("p",[e._v("SchemaStart是Schema启动的API，这个API接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("schemaid,要启动的Schemaid\n返回的值有：")]),e._v(" "),n("li",[e._v("OperationResult：表示启动成功或失败")])]),e._v(" "),n("p",[e._v("例如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mutation {\n  SchemaStart(schemaid:"5eba9b9ba7b11b000140bfda") {\n    OperationResult\n  }\n}\n')])])]),n("p",[e._v("返回值为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "data": {\n    "SchemaStart": {\n      "OperationResult": true\n    }\n  }\n}\n')])])]),n("h2",{attrs:{id:"schemastop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schemastop"}},[e._v("#")]),e._v(" SchemaStop")]),e._v(" "),n("p",[e._v("SchemaStop是Schema停止的API，这个API接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("schemaid,要启动的Schemaid\n返回的值有：")]),e._v(" "),n("li",[e._v("OperationResult：表示停止成功或失败")])]),e._v(" "),n("p",[e._v("例如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mutation {\n  SchemaStop(schemaid:"5eba9b9ba7b11b000140bfda") {\n    OperationResult\n  }\n}\n')])])]),n("p",[e._v("返回值为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "data": {\n    "SchemaStop": {\n      "OperationResult": true\n    }\n  }\n}\n')])])]),n("h2",{attrs:{id:"schemaupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schemaupdate"}},[e._v("#")]),e._v(" SchemaUpdate")]),e._v(" "),n("p",[e._v("SchemaUpdate是Schema的更新API，这个API接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("where,SchemaWhereInput字段，表示此次需要进行更新的Schema需要满足的条件")]),e._v(" "),n("li",[e._v("object, SchemaUpdateInput字段，表示需要修改的字段，不在object的字段，将不会被更新,object中不能包含id（一个对象的id不能被更新，lastupdate类型的字段进行更新无效）\n这个API的返回参数为：\n返回值为：")]),e._v(" "),n("li",[e._v("affected_rows，更新的行数")])]),e._v(" "),n("p",[e._v("SchemaUpdateInput的定义如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input SchemaUpdateInput  {\n  databasekind: DatabaseKind\n  description: String\n  name: String\n  status: SchemaStatus\n}\n")])])]),n("p",[e._v("例如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mutation {\n  SchemaUpdate(where:{\n    filter:{\n      id:{\n        eq:"5eba9b9ba7b11b000140bfda"\n      }\n    }\n  },object:{\n    name:"tests schema for update"\n  }) {\n\t\taffected_rows\n  }\n}\n')])])]),n("p",[e._v("返回值为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "data": {\n    "SchemaUpdate": {\n      "affected_rows": 1\n    }\n  }\n}\n')])])]),n("h2",{attrs:{id:"schema"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schema"}},[e._v("#")]),e._v(" Schema")]),e._v(" "),n("p",[e._v("Schema这个API，是通过ID，查询固定的Schema的API，它接收一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("id, 查询Schema的ID\n返回的为null或者1个Schema对象，Schema对象的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Schema  {\n databasekind: DatabaseKind\n datasource: DataSource\n description: String\n enumtypes: [EnumType]\n id: ID\n name: String\n objecttypes: [ContentType]\n published_history: [SchemaMetaData]\n published_schema: SchemaMetaData\n relations: [RelationField]\n status: SchemaStatus\n thirdapis: [ThirdAPI]\n triggers: [Trigger]\n}\n")])])]),n("p",[e._v("例如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('query {\n Schema(id:"5eb95beaa7b11b000140bfd3") {\n   name\n   id\n   objecttypes {\n     id\n     name\n   }\n   enumtypes {\n     values {\n       id\n     }\n   }\n   datasource {\n     id\n   }\n }\n}\n')])])]),n("p",[e._v("返回值为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n "data": {\n   "Schema": {\n     "name": "testschema2",\n     "id": "5eb95beaa7b11b000140bfd3",\n     "objecttypes": [\n       {\n         "id": "5eb95beaa7b11b000140bfd4",\n         "name": "User"\n       }\n     ],\n     "enumtypes": [\n       {\n         "values": [\n           {\n             "id": "5eb95beaa7b11b000140bfd8"\n           },\n           {\n             "id": "5eb95beaa7b11b000140bfd9"\n           }\n         ]\n       }\n     ],\n     "datasource": null\n   }\n }\n}\n')])])]),n("p",[e._v("注意：datasource为null，不表示这个Schema没有数据源，没有指定datasource的Schema会在发布的时候使用EasyGQL控制台的数据库实例，新建数据库名为Schema名 的数据库。")]),e._v(" "),n("h2",{attrs:{id:"schemamany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schemamany"}},[e._v("#")]),e._v(" SchemaMany")]),e._v(" "),n("p",[e._v("SchemaMany是一个根据where条件进行查询的接口，支持分页和排序，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("where，SchemaWhereInput的参数")]),e._v(" "),n("li",[e._v('orderby,一个String字符串，支持多字段排序，可以支持排序的字段类型为提供了比较操作符的标量类型字段，格式为"字段1，字段2，desc|asc"。')]),e._v(" "),n("li",[e._v("limit,返回的记录条数")]),e._v(" "),n("li",[e._v("skip，跳过前多少条")])]),e._v(" "),n("p",[e._v("返回值为 Schema的一个列表\n例如：\n输入：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('query {\n SchemaMany(orderby:"name,asc",limit:10) {\n   name\n }\n \n}\n')])])]),n("p",[e._v("返回值为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "data": {\n    "SchemaMany": [\n      {\n        "name": "testcase1"\n      }\n    ]\n  }\n}\n')])])]),n("h2",{attrs:{id:"schemalistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schemalistener"}},[e._v("#")]),e._v(" SchemaListener")]),e._v(" "),n("p",[e._v("SchemaListener是Schema的监听器，能够在Schema发生变化时通知订阅着，这个API接收3个参数：")]),e._v(" "),n("ul",[n("li",[e._v('select是表示返回结果集应该包含的字段，"{字段名1:true|false，字段2:true|false}"表示，当不声明这个字段是，默认为选择了所有字段。')]),e._v(" "),n("li",[e._v('watch是表示监听器监听的字段，格式为"{字段名1:true|false，字段2:true|false}"，当不声明该字段时，所有字段变化（内嵌对象除外）均会触发监听事件。')]),e._v(" "),n("li",[e._v("where是表示监听的条件，格式为SchemaWhereInput。")])]),e._v(" "),n("p",[e._v("例如创建完Schema后")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mutation  {\n  SchemaCreate(name:"testcase1",databasekind:PostgreSQL,description:"testcase2"){\n    id_list \n    affected_rows \n  }\n}\n')])])]),n("p",[e._v("返回")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "data": {\n    "SchemaCreate": {\n      "id_list": [\n        "5ebd5626f5380d1edc1d2d2e"\n      ],\n      "affected_rows": 1\n    }\n  }\n}\n')])])]),n("p",[e._v("使用监听器监听schmea的变化")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('subscription {\n  SchemaListener(\n    select:{\n      name:true\n      status:true\n    }\n    watch:{\n      name:true\n    }\n    where:{\n    filter:{\n      id:{\n        eq:"5ebd5626f5380d1edc1d2d2e"\n      }\n\t\t}\n  })\n}\n')])])]),n("p",[e._v("修改schema名字后")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mutation {\n  SchemaUpdate(object:{\n    name:"test_for_listen5"\n  },\n    where:{\n      filter:{\n        id:{\n          eq:"5ebd5626f5380d1edc1d2d2e"\n        }\n      }\n    }\n  ) {\n    affected_rows\n  }\n}\n')])])]),n("p",[e._v("得到的监听事件是")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code")])]),n("h2",{attrs:{id:"usercreate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usercreate"}},[e._v("#")]),e._v(" UserCreate")]),e._v(" "),n("p",[e._v("UserCreate是默认的任意一个Schema均有的创建用户的API，它接收两个参数：")]),e._v(" "),n("ul",[n("li",[e._v("object，一个UserInput的数组，")]),e._v(" "),n("li",[e._v("conflict，冲突解决方案，默认为replace（还有error），就是创建对象是如果数据冲突，默认为覆盖。")])]),e._v(" "),n("p",[e._v("返回值为")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows,受影响的行数")]),e._v(" "),n("li",[e._v("id_list，返回的ID列表。")])]),e._v(" "),n("h2",{attrs:{id:"userdestory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#userdestory"}},[e._v("#")]),e._v(" UserDestory")]),e._v(" "),n("p",[e._v("UserDestory是默认的任意一个Schema均提供的删除用户的API，它接收一个参数")]),e._v(" "),n("ul",[n("li",[e._v("where,删除条件UserWhereInput")])]),e._v(" "),n("p",[e._v("返回值为")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows,受影响的行数")])]),e._v(" "),n("h2",{attrs:{id:"userupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#userupdate"}},[e._v("#")]),e._v(" UserUpdate")]),e._v(" "),n("p",[e._v("UserUpdate是默认的任意一个Schema均提供的用户更新的API，它接收两个参数")]),e._v(" "),n("ul",[n("li",[e._v("where,UserWhereInput字段，表示此次需要进行更新的用户需要满足的条件")]),e._v(" "),n("li",[e._v("object, UserUpdateInput字段，表示需要修改的字段，不在object的字段，将不会被更新,object中不能包含id（一个对象的id不能被更新，lastupdate类型的字段进行更新无效）\n这个API的返回参数为：\n返回值为：")]),e._v(" "),n("li",[e._v("affected_rows，更新的行数")])]),e._v(" "),n("h2",{attrs:{id:"userlogin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#userlogin"}},[e._v("#")]),e._v(" UserLogin")]),e._v(" "),n("p",[e._v("UserLogin是EasyGQL默认为每一个Schema提供的用户登录的API，它接收两个参数")]),e._v(" "),n("ul",[n("li",[e._v("username， 表示用户名")]),e._v(" "),n("li",[e._v("password，表示密码\n返回参数有两个个：")]),e._v(" "),n("li",[e._v("login_result，true|false，表示登录是否成功")]),e._v(" "),n("li",[e._v("token ，登录成功返回的token")])]),e._v(" "),n("h2",{attrs:{id:"user"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#user"}},[e._v("#")]),e._v(" User")]),e._v(" "),n("p",[e._v("User是根据用户ID查询用户的所有信息的API\n接收参数有：")]),e._v(" "),n("ul",[n("li",[e._v("id，表示用户的ID\n返回的参数可以是对应Schema的用户对象的所有属性，但是为了安全起见，建议在进行设计时，将用户的密码字段设置为不可以查询。")])]),e._v(" "),n("h2",{attrs:{id:"usermany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usermany"}},[e._v("#")]),e._v(" UserMany")]),e._v(" "),n("p",[e._v("UserMany是根据条件查询用户信息的API，接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("where，UserWhereInput的参数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input UserWhereInput  {\n  and: [UserWhereInput]\n  field_contains: [String]\n  filter: UserFieldFilter\n  not: UserWhereInput\n  or: [UserWhereInput]\n}\ninput UserFieldFilter  {\n  id: IDFilter\n  password: StringFilter\n  role: Role_EnumFilter\n  username: StringFilter\n}\n\n")])])]),n("ul",[n("li",[e._v('orderby,一个String字符串，支持多字段排序，可以支持排序的字段类型为提供了比较操作符的标量类型字段，格式为"字段1，字段2，desc|asc"。')]),e._v(" "),n("li",[e._v("limit,返回的记录条数")]),e._v(" "),n("li",[e._v("skip，跳过前多少条")])]),e._v(" "),n("p",[e._v("返回值为 User的一个列表")]),e._v(" "),n("h2",{attrs:{id:"userlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#userlistener"}},[e._v("#")]),e._v(" UserListener")]),e._v(" "),n("p",[e._v("这是用户监听器，可以监听EasyGQL引擎为所有Schema提供的监听用户信息变化的工具，它接收三个参数：")]),e._v(" "),n("ul",[n("li",[e._v("select,select是一个map型的参数,不同Schema因为用户信息字段不一样，select具体字段存在差异，但至少拥有以下几个字段")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\ninput User_FieldsMap  {\n password: Boolean = false\n role: Boolean = false\n username: Boolean = false\n}\n")])])]),n("p",[e._v("在select中，必须有一个字段为true")]),e._v(" "),n("ul",[n("li",[e._v("watch，watch和select一样时一个map型参数，定义同select定义。")]),e._v(" "),n("li",[e._v("where,UserWhereInput型参数（具体使用方法同UserMany），表示监听数据的范围。\n返回值有三个部分：")]),e._v(" "),n("li",[e._v("action： insert、update、delete。")]),e._v(" "),n("li",[e._v("old_val: 变更之前的值")]),e._v(" "),n("li",[e._v("new_val: 变更之后的值")])]),e._v(" "),n("h2",{attrs:{id:"objecttypesinschema-objectinput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#objecttypesinschema-objectinput"}},[e._v("#")]),e._v(" objecttypesInSchema_ObjectInput")]),e._v(" "),n("p",[e._v("这个API是在Schema为objecttypes这个内嵌关联关系字段新增数据用的，默认创建新的ContentType类型对象，然后将创建的对象和schema的objecttypes字段关联，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，schema的ID，必填要素")]),e._v(" "),n("li",[e._v("reset,true或者false表示是否重置，默认为false")]),e._v(" "),n("li",[e._v("to_object,一个ContentTypeInput的类型的数组，因为objecttypes字段是一个数组类型，所以to_object可以为0到N个ContentTypeInput对象。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("inputNestIDList，表示新创建对象的ID列表。")])]),e._v(" "),n("p",[e._v("ContentTypeInput这个字段的定义如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input ContentTypeUpdateInput {\n  delete_constraints: Object\n  description: String\n  name: String\n  read_constraints: Object\n  undeletable_roles: [Role]\n  uninsertable_roles: [Role]\n  unreadable_roles: [Role]\n  unupdatable_roles: [Role]\n  update_constraints: Object\n}\n")])])]),n("p",[e._v("在contentTypeUpdateInput这个字段里，delete_constaint、read_constraint、update_constraint都是用来根据用户角色约束用户查询、修改和删除操作的数据范围的，具体用法见"),n("a",{attrs:{href:""}},[e._v("权限管理章节")]),e._v(",undeleteable_roles、uninsertabel_roles、unupdatable_roles、unreadable_roles是表示禁止使用删除、插入、更新、查询的API接口的角色列表。")]),e._v(" "),n("h2",{attrs:{id:"objecttypesinschema-nestremove"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#objecttypesinschema-nestremove"}},[e._v("#")]),e._v(" objecttypesInSchema_NestRemove")]),e._v(" "),n("p",[e._v("这个API是在Schema为objecttypes这个内嵌关联关系字段删除数据用的，在删除关联关系的同时会删除相应的ContentType对象：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，schema的ID，必填要素")]),e._v(" "),n("li",[e._v("to_id,ContentType类型对象的ID列表。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"contenttypeupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contenttypeupdate"}},[e._v("#")]),e._v(" ContentTypeUpdate")]),e._v(" "),n("p",[e._v("这个API是按条件更新ContentType对象内容的API，它接收两个参数：")]),e._v(" "),n("ul",[n("li",[e._v("object，ContentTypeUpdateInput类型字段，表示需要更新的字段，ContentTypeUpdateInput的所有属性都是非必填的，仅对输入的要输进行更新。ContentTypeUpdateInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input ContentTypeUpdateInput {\n  delete_constraints: Object\n  description: String\n  name: String\n  read_constraints: Object\n  undeletable_roles: [Role]\n  uninsertable_roles: [Role]\n  unreadable_roles: [Role]\n  unupdatable_roles: [Role]\n  update_constraints: Object\n}\n")])])]),n("ul",[n("li",[e._v("where,ContentTypeWhereInput类型的字段，用以确定数据更新的范围。ContentTypeWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input ContentTypeWhereInput  {\n  and: [ContentTypeWhereInput]\n  field_contains: [String]\n  filter: ContentTypeFieldFilter\n  not: ContentTypeWhereInput\n  or: [ContentTypeWhereInput]\n}\ninput ContentTypeFieldFilter  {\n  description: StringFilter\n  enumfields: EnumFieldListMatch\n  id: IDFilter\n  name: StringFilter\n  objecttypes: ContentTypeFieldFilter\n  scalarfields: ScalarFieldListMatch\n  undeletable_roles: Role_EnumListFilter\n  uninsertable_roles: Role_EnumListFilter\n  unique_constraints: UniqueConstraintListMatch\n  unreadable_roles: Role_EnumListFilter\n  unupdatable_roles: Role_EnumListFilter\n}\n\n\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"contenttypedestroy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contenttypedestroy"}},[e._v("#")]),e._v(" ContentTypeDestroy")]),e._v(" "),n("p",[e._v("这个API用于根据Where条件删除ContentType对象，它接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("where，ContentTypeWhereInput类型的字段，表示删除的数据范围\n它返回一个参数：")]),e._v(" "),n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"contenttype"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contenttype"}},[e._v("#")]),e._v(" ContentType")]),e._v(" "),n("p",[e._v("这个API用于根据ID查询固定的ContentType对象，它接收一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("id,表示要查询的ContentType的对象\n它返回一个参数，表示查询到的ContentType对象的具体内容，如果查询到的结果为空，则返回null。返回值的具体类型定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type ContentType  {\n  delete_constraints: Object\n  description: String\n  enumfields: [EnumField]\n  id: ID\n  name: String\n  read_constraints: Object\n  scalarfields: [ScalarField]\n  schemaid: Schema\n  undeletable_roles: [Role]\n  uninsertable_roles: [Role]\n  unique_constraints: [UniqueConstraint]\n  unreadable_roles: [Role]\n  unupdatable_roles: [Role]\n  update_constraints: Object\n}\n")])])]),n("p",[e._v("在以上类型定义中，scalarfields表示ContentType对象的标量字段列表、enumfields表示ContentType对象的枚举类型字段列表。")]),e._v(" "),n("h2",{attrs:{id:"contenttypemany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contenttypemany"}},[e._v("#")]),e._v(" ContentTypeMany")]),e._v(" "),n("p",[e._v("这个API用于根据条件查询ContentType的数据对象，它接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("where，ContentTypeWhereInput的参数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input ContentTypeWhereInput  {\n  and: [ContentTypeWhereInput]\n  field_contains: [String]\n  filter: ContentTypeFieldFilter\n  not: ContentTypeWhereInput\n  or: [ContentTypeWhereInput]\n}\ninput ContentTypeFieldFilter  {\n  description: StringFilter\n  enumfields: EnumFieldListMatch\n  id: IDFilter\n  name: StringFilter\n  objecttypes: ContentTypeFieldFilter\n  scalarfields: ScalarFieldListMatch\n  undeletable_roles: Role_EnumListFilter\n  uninsertable_roles: Role_EnumListFilter\n  unique_constraints: UniqueConstraintListMatch\n  unreadable_roles: Role_EnumListFilter\n  unupdatable_roles: Role_EnumListFilter\n}\n")])])]),n("ul",[n("li",[e._v('orderby,一个String字符串，支持多字段排序，可以支持排序的字段类型为提供了比较操作符的标量类型字段，格式为"字段1，字段2，desc|asc"。')]),e._v(" "),n("li",[e._v("limit,返回的记录条数")]),e._v(" "),n("li",[e._v("skip，跳过前多少条")])]),e._v(" "),n("p",[e._v("返回值为ContentType的列表")]),e._v(" "),n("h2",{attrs:{id:"contenttypelistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contenttypelistener"}},[e._v("#")]),e._v(" ContentTypeListener")]),e._v(" "),n("p",[e._v("这是对象类型监听器，可以监听EasyGQL引擎中Schema中对象类型的变化，它接收三个参数：")]),e._v(" "),n("ul",[n("li",[e._v("select,select是一个map型的参数,具体定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input ContentType_FieldsMap  {\n delete_constraints: Boolean = false\n description: Boolean = false\n name: Boolean = false\n read_constraints: Boolean = false\n schemaid: Boolean = false\n undeletable_roles: Boolean = false\n uninsertable_roles: Boolean = false\n unreadable_roles: Boolean = false\n unupdatable_roles: Boolean = false\n update_constraints: Boolean = false\n}\n\n")])])]),n("p",[e._v("在select中，必须有一个字段为true")]),e._v(" "),n("ul",[n("li",[e._v("watch，watch和select一样时一个map型参数，定义同select定义。")]),e._v(" "),n("li",[e._v("where,ContentTypeWhereInput型参数（具体使用方法同ContentTypeMany），表示监听数据的范围。\n返回值有三个部分：")]),e._v(" "),n("li",[e._v("action： insert、update、delete。")]),e._v(" "),n("li",[e._v("old_val: 变更之前的值")]),e._v(" "),n("li",[e._v("new_val: 变更之后的值")])]),e._v(" "),n("h2",{attrs:{id:"enumtypesinschema-objectinput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumtypesinschema-objectinput"}},[e._v("#")]),e._v(" enumtypesInSchema_ObjectInput")]),e._v(" "),n("p",[e._v("这个API是在Schema为enumtypes这个内嵌关联关系字段新增数据用的，默认创建新的EnumType（枚举类型）类型对象，然后将创建的对象和schema的enumtypes字段关联，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，schema的ID，必填要素")]),e._v(" "),n("li",[e._v("reset,true或者false表示是否重置，默认为false")]),e._v(" "),n("li",[e._v("to_object,一个EnumTypeInput的类型的数组，因为enumtypes字段是一个数组类型，所以to_object可以为0到N个EnumTypeInput对象。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("inputNestIDList，表示新创建枚举类型的ID列表。")])]),e._v(" "),n("p",[e._v("EnumTypeInput这个字段的定义如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('input EnumTypeInput  {\n  description: String = ""\n  id: ID\n  name: String!\n}\n')])])]),n("h2",{attrs:{id:"enumtypesinschema-nestremove"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumtypesinschema-nestremove"}},[e._v("#")]),e._v(" enumtypesInSchema_NestRemove")]),e._v(" "),n("p",[e._v("这个API是在Schema为enumtypes这个内嵌关联关系字段删除数据用的，在删除关联关系的同时会删除和对应枚举类型下的所有枚举元素（EnumElement）对象：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，schema的ID，必填要素")]),e._v(" "),n("li",[e._v("to_id,EnumType类型对象的ID列表。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"enumtypeupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumtypeupdate"}},[e._v("#")]),e._v(" EnumTypeUpdate")]),e._v(" "),n("p",[e._v("这个API是按条件更新EnumTypes对象内容的API，它接收两个参数：")]),e._v(" "),n("ul",[n("li",[e._v("object，EnumTypeUpdateInput类型字段，表示需要更新的字段，EnumTypeUpdateInput的所有属性都是非必填的，仅对输入的要输进行更新。EnumTypeUpdateInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('input EnumTypeInput  {\n  description: String = ""\n  id: ID\n  name: String!\n}\n')])])]),n("ul",[n("li",[e._v("where,EnumTypeWhereInput类型的字段，用以确定数据更新的范围。EnumTypeWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('input EnumTypeWhereInput  {\n  and: [EnumTypeWhereInput]\n  field_contains: [String]\n  filter: EnumTypeFieldFilter\n  not: EnumTypeWhereInput\n  or: [EnumTypeWhereInput]\n}\n input EnumTypeFieldFilter @objectfieldfilter_metadata(metadata : "{\\"objectname\\":\\"EnumType\\"}") {\n  description: StringFilter\n  enumtypes: EnumTypeFieldFilter\n  id: IDFilter\n  name: StringFilter\n  values: EnumElementListMatch\n }\n\n')])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"enumtypedestroy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumtypedestroy"}},[e._v("#")]),e._v(" EnumTypeDestroy")]),e._v(" "),n("p",[e._v("这个API是按条件删除枚举类型的API，它接收一个参数")]),e._v(" "),n("ul",[n("li",[e._v("where,EnumTypeWhereInput类型的字段，用以确定删除数据的范围。EnumTypeWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('input EnumTypeWhereInput  {\n  and: [EnumTypeWhereInput]\n  field_contains: [String]\n  filter: EnumTypeFieldFilter\n  not: EnumTypeWhereInput\n  or: [EnumTypeWhereInput]\n}\n input EnumTypeFieldFilter @objectfieldfilter_metadata(metadata : "{\\"objectname\\":\\"EnumType\\"}") {\n  description: StringFilter\n  enumtypes: EnumTypeFieldFilter\n  id: IDFilter\n  name: StringFilter\n  values: EnumElementListMatch\n }\n\n')])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"enumtype"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumtype"}},[e._v("#")]),e._v(" EnumType")]),e._v(" "),n("p",[e._v("这个API用于根据ID查询固定的EnumType对象，它接收一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("id,表示要查询的EnumType的对象\n它返回一个参数，表示查询到的EnumType对象的具体内容，如果查询到的结果为空，则返回null。返回值的具体类型定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type EnumType  {\n  description: String\n  id: ID\n  name: String\n  schemaid: Schema\n  values: [EnumElement]\n}\n")])])]),n("p",[e._v("在以上类型定义中，values表示EnumType对象的枚举元素列表。")]),e._v(" "),n("h2",{attrs:{id:"enumtypemany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumtypemany"}},[e._v("#")]),e._v(" EnumTypeMany")]),e._v(" "),n("p",[e._v("这个API用于根据条件查询EnumType的数据对象，它接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("where，EnumTypeWhereInput的参数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('input EnumTypeWhereInput  {\n  and: [EnumTypeWhereInput]\n  field_contains: [String]\n  filter: EnumTypeFieldFilter\n  not: EnumTypeWhereInput\n  or: [EnumTypeWhereInput]\n}\n input EnumTypeFieldFilter @objectfieldfilter_metadata(metadata : "{\\"objectname\\":\\"EnumType\\"}") {\n  description: StringFilter\n  enumtypes: EnumTypeFieldFilter\n  id: IDFilter\n  name: StringFilter\n  values: EnumElementListMatch\n }\n')])])]),n("ul",[n("li",[e._v('orderby,一个String字符串，支持多字段排序，可以支持排序的字段类型为提供了比较操作符的标量类型字段，格式为"字段1，字段2，desc|asc"。')]),e._v(" "),n("li",[e._v("limit,返回的记录条数")]),e._v(" "),n("li",[e._v("skip，跳过前多少条")])]),e._v(" "),n("p",[e._v("返回值为EnumType的列表")]),e._v(" "),n("h2",{attrs:{id:"enumtypelistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumtypelistener"}},[e._v("#")]),e._v(" EnumTypeListener")]),e._v(" "),n("p",[e._v("这是枚举类型监听器，可以监听EasyGQL引擎中Schema中枚举类型的变化，它接收三个参数：")]),e._v(" "),n("ul",[n("li",[e._v("select,select是一个map型的参数,具体定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumType_FieldsMap  {\n description: Boolean = false\n name: Boolean = false\n schemaid: Boolean = false\n}\n")])])]),n("p",[e._v("在select中，必须有一个字段为true")]),e._v(" "),n("ul",[n("li",[e._v("watch，watch和select一样时一个map型参数，定义同select定义。")]),e._v(" "),n("li",[e._v("where,EnumTypeWhereInput型参数（具体使用方法同EnumTypeMany），表示监听数据的范围。\n返回值有三个部分：")]),e._v(" "),n("li",[e._v("action： insert、update、delete。")]),e._v(" "),n("li",[e._v("old_val: 变更之前的值")]),e._v(" "),n("li",[e._v("new_val: 变更之后的值")])]),e._v(" "),n("h2",{attrs:{id:"datasourceinschema-objectinput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#datasourceinschema-objectinput"}},[e._v("#")]),e._v(" datasourceInSchema_ObjectInput")]),e._v(" "),n("p",[e._v("这个API是在Schema为datasource这个内嵌关联关系字段新增数据用的，默认创建新的DataSource（枚举类型）类型对象，如果schema的原有datasource关联的不为空，则删除原有对象：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，schema的ID，必填要素")]),e._v(" "),n("li",[e._v("reset,true或者false表示是否重置，默认为false")]),e._v(" "),n("li",[e._v("to_object,一个DataSourceInput的类型的数组，因为datasource字段不是数组，所以to_object可以为0到1个DataSourceInput对象。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("inputNestIDList，表示新创建枚举类型的ID列表。")])]),e._v(" "),n("p",[e._v("DataSourceInput这个字段的定义如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input DataSourceInput  {\n  character_encoding: String\n  connectionstr: String\n  databasename: String\n  host: String\n  id: ID\n  max_connection: Int\n  max_idle_connection: Int\n  min_connection: Int\n  min_idle_connection: Int\n  name: String!\n  password: String\n  port: String\n  replica_name: String\n  username: String\n}\n")])])]),n("h2",{attrs:{id:"datasourceinschema-nestremove"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#datasourceinschema-nestremove"}},[e._v("#")]),e._v(" datasourceInSchema_NestRemove")]),e._v(" "),n("p",[e._v("这个API是在Schema为datasource这个内嵌关联关系字段删除数据用的，在删除关联关系的时候同时会删除对应DataSource对象：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，schema的ID，必填要素\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"datasourceupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#datasourceupdate"}},[e._v("#")]),e._v(" DataSourceUpdate")]),e._v(" "),n("p",[e._v("这个API是根据条件对数据源进行更新的API，它接收两个参数：")]),e._v(" "),n("ul",[n("li",[e._v("object，DataSourceUpdateInput类型字段，表示需要更新的字段，EnumTypeUpdateInput的所有属性都是非必填的，仅对输入的要输进行更新。DataSourceUpdateInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input DataSourceUpdateInput  {\n  character_encoding: String\n  connectionstr: String\n  databasename: String\n  host: String\n  max_connection: Int\n  max_idle_connection: Int\n  min_connection: Int\n  min_idle_connection: Int\n  name: String\n  password: String\n  port: String\n  replica_name: String\n  username: String\n}\n")])])]),n("ul",[n("li",[e._v("where,DataSourceWhereInput类型的字段，用以确定数据更新的范围。DataSourceWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input DataSourceWhereInput  {\n  and: [DataSourceWhereInput]\n  field_contains: [String]\n  filter: DataSourceFieldFilter\n  not: DataSourceWhereInput\n  or: [DataSourceWhereInput]\n}\ninput DataSourceFieldFilter  {\n  character_encoding: StringFilter\n  connectionstr: StringFilter\n  databasename: StringFilter\n  datasource: DataSourceFieldFilter\n  host: StringFilter\n  id: IDFilter\n  max_connection: IntFilter\n  max_idle_connection: IntFilter\n  min_connection: IntFilter\n  min_idle_connection: IntFilter\n  name: StringFilter\n  password: StringFilter\n  port: StringFilter\n  replica_name: StringFilter\n  username: StringFilter\n}\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"datasourcedestroy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#datasourcedestroy"}},[e._v("#")]),e._v(" DataSourceDestroy")]),e._v(" "),n("p",[e._v("这个API是按条件删除已经定义好的数据源的API，它接收一个参数")]),e._v(" "),n("ul",[n("li",[e._v("where,DatSourceWhereInput类型的字段，用以确定删除数据的范围。DataSourceWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input DataSourceWhereInput  {\n  and: [DataSourceWhereInput]\n  field_contains: [String]\n  filter: DataSourceFieldFilter\n  not: DataSourceWhereInput\n  or: [DataSourceWhereInput]\n}\ninput DataSourceFieldFilter  {\n  character_encoding: StringFilter\n  connectionstr: StringFilter\n  databasename: StringFilter\n  datasource: DataSourceFieldFilter\n  host: StringFilter\n  id: IDFilter\n  max_connection: IntFilter\n  max_idle_connection: IntFilter\n  min_connection: IntFilter\n  min_idle_connection: IntFilter\n  name: StringFilter\n  password: StringFilter\n  port: StringFilter\n  replica_name: StringFilter\n  username: StringFilter\n}\n\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"datasource"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#datasource"}},[e._v("#")]),e._v(" DataSource")]),e._v(" "),n("p",[e._v("这个API用于根据ID查询固定的数据源对象，它接收一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("id,表示要查询的数据源的对象\n它返回一个参数，表示查询到的数据源对象的具体内容，如果查询到的结果为空，则返回null。返回值的具体类型定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type DataSource {\n  character_encoding: String\n  connectionstr: String\n  databasename: String\n  host: String\n  id: ID\n  max_connection: Int\n  max_idle_connection: Int\n  min_connection: Int\n  min_idle_connection: Int\n  name: String\n  password: String\n  port: String\n  replica_name: String\n  schemaid: Schema\n  username: String\n}\n")])])]),n("p",[e._v("在以上类型定义中，schemaid表示数据源所属Schema的信息。")]),e._v(" "),n("h2",{attrs:{id:"datasourcemany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#datasourcemany"}},[e._v("#")]),e._v(" DataSourceMany")]),e._v(" "),n("p",[e._v("这个API用于根据条件查询数据源对象，它接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("where，DataSourceWhereInput的参数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input DataSourceWhereInput  {\n  and: [DataSourceWhereInput]\n  field_contains: [String]\n  filter: DataSourceFieldFilter\n  not: DataSourceWhereInput\n  or: [DataSourceWhereInput]\n}\ninput DataSourceFieldFilter  {\n  character_encoding: StringFilter\n  connectionstr: StringFilter\n  databasename: StringFilter\n  datasource: DataSourceFieldFilter\n  host: StringFilter\n  id: IDFilter\n  max_connection: IntFilter\n  max_idle_connection: IntFilter\n  min_connection: IntFilter\n  min_idle_connection: IntFilter\n  name: StringFilter\n  password: StringFilter\n  port: StringFilter\n  replica_name: StringFilter\n  username: StringFilter\n}\n")])])]),n("ul",[n("li",[e._v('orderby,一个String字符串，支持多字段排序，可以支持排序的字段类型为提供了比较操作符的标量类型字段，格式为"字段1，字段2，desc|asc"。')]),e._v(" "),n("li",[e._v("limit,返回的记录条数")]),e._v(" "),n("li",[e._v("skip，跳过前多少条")])]),e._v(" "),n("p",[e._v("返回值为DataSource的列表")]),e._v(" "),n("h2",{attrs:{id:"datasourcelistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#datasourcelistener"}},[e._v("#")]),e._v(" DataSourceListener")]),e._v(" "),n("p",[e._v("这是数据源监听器，可以监听EasyGQL引擎中Schema中数据源的变化，它接收三个参数：")]),e._v(" "),n("ul",[n("li",[e._v("select,select是一个map型的参数,具体定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input DataSource_FieldsMap   {\n character_encoding: Boolean = false\n connectionstr: Boolean = false\n databasename: Boolean = false\n host: Boolean = false\n max_connection: Boolean = false\n max_idle_connection: Boolean = false\n min_connection: Boolean = false\n min_idle_connection: Boolean = false\n name: Boolean = false\n password: Boolean = false\n port: Boolean = false\n replica_name: Boolean = false\n schemaid: Boolean = false\n username: Boolean = false\n}\n")])])]),n("p",[e._v("在select中，必须有一个字段为true")]),e._v(" "),n("ul",[n("li",[e._v("watch，watch和select一样时一个map型参数，定义同select定义。")]),e._v(" "),n("li",[e._v("where,DataSourceWhereInput型参数（具体使用方法同DataaSourceMany），表示监听数据的范围。\n返回值有三个部分：")]),e._v(" "),n("li",[e._v("action： insert、update、delete。")]),e._v(" "),n("li",[e._v("old_val: 变更之前的值")]),e._v(" "),n("li",[e._v("new_val: 变更之后的值")])]),e._v(" "),n("h2",{attrs:{id:"valuesinenumtype-objectinput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#valuesinenumtype-objectinput"}},[e._v("#")]),e._v(" valuesInEnumType_ObjectInput")]),e._v(" "),n("p",[e._v("这个API是在枚举类型中为values这个内嵌关联关系字段新增数据用的，也就是新增枚举类型的枚举元素。默认创建新的EnumElement（枚举元素）类型对象：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，枚举类型的ID，必填要素")]),e._v(" "),n("li",[e._v("reset,true或者false表示是否重置，默认为false")]),e._v(" "),n("li",[e._v("to_object,一个EnumElementInput的类型的数组，因为values字段是数组，所以to_object可以为0到N个EnumElementInput对象。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("inputNestIDList，表示新创建枚举类型的ID列表。")])]),e._v(" "),n("p",[e._v("EnumElementInput这个字段的定义如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('input EnumElementInput {\n  description: String = ""\n  id: ID\n  value: String!\n}\n\n')])])]),n("h2",{attrs:{id:"valuesinenumtype-nestremove"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#valuesinenumtype-nestremove"}},[e._v("#")]),e._v(" valuesInEnumType_NestRemove")]),e._v(" "),n("p",[e._v("这个API是在枚举对象中删除枚举元素用的：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，枚举对象的ID，必填要素。")]),e._v(" "),n("li",[e._v("to_id,枚举元素的ID列表。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"enumelementupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumelementupdate"}},[e._v("#")]),e._v(" EnumElementUpdate")]),e._v(" "),n("p",[e._v("这个API是枚举元素的更新，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("object，EnumElementUpdateInput类型字段，表示需要更新的字段，EnumTypeUpdateInput的所有属性都是非必填的，仅对输入的要输进行更新。EnumElementUpdateInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumElementUpdateInput  {\n  description: String\n  value: String\n}\n")])])]),n("ul",[n("li",[e._v("where,DataSourceWhereInput类型的字段，用以确定数据更新的范围。DataSourceWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumElementWhereInput  {\n  and: [EnumElementWhereInput]\n  field_contains: [String]\n  filter: EnumElementFieldFilter\n  not: EnumElementWhereInput\n  or: [EnumElementWhereInput]\n}\ninput EnumElementFieldFilter  {\n  description: StringFilter\n  id: IDFilter\n  value: StringFilter\n}\n\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"enumelementdestroy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumelementdestroy"}},[e._v("#")]),e._v(" EnumElementDestroy")]),e._v(" "),n("p",[e._v("这个API是按条件删除已经定义好的枚举元素，它接收一个参数")]),e._v(" "),n("ul",[n("li",[e._v("where,EnumElementWhereInput类型的字段，用以确定删除数据的范围。EnumElementWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumElementWhereInput  {\n  and: [EnumElementWhereInput]\n  field_contains: [String]\n  filter: EnumElementFieldFilter\n  not: EnumElementWhereInput\n  or: [EnumElementWhereInput]\n}\ninput EnumElementFieldFilter  {\n  description: StringFilter\n  id: IDFilter\n  value: StringFilter\n}\n\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"enumelement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumelement"}},[e._v("#")]),e._v(" EnumElement")]),e._v(" "),n("p",[e._v("这个API用于根据ID查询枚举元素,它接收一个参数")]),e._v(" "),n("ul",[n("li",[e._v("id,表示要查询的枚举元素的ID\n它返回一个参数，表示查询到的数据源对象的具体内容，如果查询到的结果为空，则返回null。返回值的具体类型定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type EnumElement {\n  description: String\n  enumtype: EnumType\n  id: ID\n  value: String\n}\n")])])]),n("p",[e._v("在以上类型定义中，enumtype表示数据源所属枚举类型的信息。")]),e._v(" "),n("h2",{attrs:{id:"enumelementmany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumelementmany"}},[e._v("#")]),e._v(" EnumElementMany")]),e._v(" "),n("p",[e._v("这个API用于根据where条件查询枚举元素，它接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("where，ElementWhereInput的参数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumElementWhereInput  {\n  and: [EnumElementWhereInput]\n  field_contains: [String]\n  filter: EnumElementFieldFilter\n  not: EnumElementWhereInput\n  or: [EnumElementWhereInput]\n}\ninput EnumElementFieldFilter  {\n  description: StringFilter\n  id: IDFilter\n  value: StringFilter\n}\n")])])]),n("ul",[n("li",[e._v('orderby,一个String字符串，支持多字段排序，可以支持排序的字段类型为提供了比较操作符的标量类型字段，格式为"字段1，字段2，desc|asc"。')]),e._v(" "),n("li",[e._v("limit,返回的记录条数")]),e._v(" "),n("li",[e._v("skip，跳过前多少条")])]),e._v(" "),n("p",[e._v("返回值为Element的列表")]),e._v(" "),n("h2",{attrs:{id:"enumelementlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumelementlistener"}},[e._v("#")]),e._v(" EnumElementListener")]),e._v(" "),n("p",[e._v("这是枚举元素监听器，可以监听EasyGQL引擎中Schema中枚举类型具体枚举项的变化，它接收三个参数：")]),e._v(" "),n("ul",[n("li",[e._v("select,select是一个map型的参数,具体定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumElement_FieldsMap  {\n description: Boolean = false\n enumtype: Boolean = false\n value: Boolean = false\n}\n")])])]),n("p",[e._v("在select中，必须有一个字段为true")]),e._v(" "),n("ul",[n("li",[e._v("watch，watch和select一样时一个map型参数，定义同select定义。")]),e._v(" "),n("li",[e._v("where,EnumElementWhereInput型参数（具体使用方法同EnumElementMany），表示监听数据的范围。\n返回值有三个部分：")]),e._v(" "),n("li",[e._v("action： insert、update、delete。")]),e._v(" "),n("li",[e._v("old_val: 变更之前的值")]),e._v(" "),n("li",[e._v("new_val: 变更之后的值")])]),e._v(" "),n("h2",{attrs:{id:"relationsinschema-objectinput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#relationsinschema-objectinput"}},[e._v("#")]),e._v(" relationsInSchema_ObjectInput")]),e._v(" "),n("p",[e._v("这个API是在Schema中为relation这个字段新增数据用的，新增的是不同ContentType对象之间的关联关系，它接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，Schema的ID，必填要素")]),e._v(" "),n("li",[e._v("reset,true或者false表示是否重置，默认为false")]),e._v(" "),n("li",[e._v("to_object,一个RelationFieldInput的类型的数组，因为relations字段是数组，所以to_object可以为0到N个RelationFieldInput对象。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("inputNestIDList，表示新创建的关联关系ID列表。")])]),e._v(" "),n("p",[e._v("RelationFieldInput这个字段的定义如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input RelationFieldInput  {\n  fromfield: String!\n  fromobject: String!\n  id: ID\n  ifcascade: Boolean = false\n  invisible_roles: [Role]\n  irrevisible_roles: [Role]\n  relationtype: RelationType!\n  tofield: String!\n  toobject: String!\n}\n")])])]),n("p",[e._v("在以上定义中，fromfield表示关联关系在关联对象中的字段名称，fromobject表示关联关系中关联对象的类型名称（注意是“名称”），toobject是关联关系中，被关联对象的字段名称，toobject表示关联关系中，被关联对象的对象名称,ifcascade表示是否级联删除，invisible_roles表示这个关联关系可以被哪些角色看见，不可见的角色不可以通过fromfield或tofield找对对应的关联对象或被关联对象信息。irrevisible_roles表示不可以更改关联关系角色名单，在这个名单中的角色不可以设置关联关系。\nrelationtpe表示关联关系类型，有4种关联关系")]),e._v(" "),n("ul",[n("li",[e._v("one2one，表示关联对象和被关联对象是一对一的关系")]),e._v(" "),n("li",[e._v("one2many，表示关联对象和被关联对象是一对多的关系")]),e._v(" "),n("li",[e._v("many2one，表示关联对象和被关联对象是多对1的关系")]),e._v(" "),n("li",[e._v("many2many，表示关联对象和被关联对象是多对多的关系")])]),e._v(" "),n("p",[e._v("只有one2one和one2many这两种关联关系可以设置ifcascade为true")]),e._v(" "),n("h2",{attrs:{id:"relationsinschema-nestremove"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#relationsinschema-nestremove"}},[e._v("#")]),e._v(" relationsInSchema_NestRemove")]),e._v(" "),n("p",[e._v("这个API是在Schema中删除关联关系用的，：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，Schema的ID，必填要素。")]),e._v(" "),n("li",[e._v("to_id,关联关系的ID列表。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"relationfielddestroy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#relationfielddestroy"}},[e._v("#")]),e._v(" RelationFieldDestroy")]),e._v(" "),n("p",[e._v("这个API是按条件删除已经定义好的关联关系，它接收一个参数")]),e._v(" "),n("ul",[n("li",[e._v("where,RelationFieldWhereInput类型的字段，用以确定删除数据的范围。RelationFieldWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input RelationFieldWhereInput  {\n  and: [RelationFieldWhereInput]\n  field_contains: [String]\n  filter: RelationFieldFieldFilter\n  not: RelationFieldWhereInput\n  or: [RelationFieldWhereInput]\n}\ninput RelationFieldFieldFilter  {\n  fromfield: StringFilter\n  fromobject: StringFilter\n  id: IDFilter\n  ifcascade: BoolFilter\n  invisible_roles: Role_EnumListFilter\n  irrevisible_roles: Role_EnumListFilter\n  relations: RelationFieldFieldFilter\n  relationtype: RelationType_EnumFilter\n  tofield: StringFilter\n  toobject: StringFilter\n}\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"relationfieldupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#relationfieldupdate"}},[e._v("#")]),e._v(" RelationFieldUpdate")]),e._v(" "),n("p",[e._v("这个API是关联关系更新用的，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("object，RelationFieldUpdateInput类型字段，表示需要更新的字段，RelationFieldUpdateInput的所有属性都是非必填的，仅对输入的要输进行更新。RelationFieldUpdateInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\ninput RelationFieldUpdateInput  {\n  fromfield: String\n  fromobject: String\n  ifcascade: Boolean\n  invisible_roles: [Role]\n  irrevisible_roles: [Role]\n  relationtype: RelationType\n  tofield: String\n  toobject: String\n}\n")])])]),n("ul",[n("li",[e._v("where,RelationFieldWhereInput类型的字段，用以确定数据更新的范围。RelationFieldWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input RelationFieldWhereInput  {\n  and: [RelationFieldWhereInput]\n  field_contains: [String]\n  filter: RelationFieldFieldFilter\n  not: RelationFieldWhereInput\n  or: [RelationFieldWhereInput]\n}\ninput RelationFieldFieldFilter  {\n  fromfield: StringFilter\n  fromobject: StringFilter\n  id: IDFilter\n  ifcascade: BoolFilter\n  invisible_roles: Role_EnumListFilter\n  irrevisible_roles: Role_EnumListFilter\n  relations: RelationFieldFieldFilter\n  relationtype: RelationType_EnumFilter\n  tofield: StringFilter\n  toobject: StringFilter\n}\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"relationfield"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#relationfield"}},[e._v("#")]),e._v(" RelationField")]),e._v(" "),n("p",[e._v("这个API用于根据ID查询关联关系，它接收一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("id, 表示要查询的关联关系对象的ID。\n它返回一个参数，表示查询到的关联关系的具体内容，如果查询到的结果为空，则返回null。返回值的具体类型定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type RelationField   {\n  fromfield: String\n  fromobject: String\n  id: ID\n  ifcascade: Boolean\n  invisible_roles: [Role]\n  irrevisible_roles: [Role]\n  relationtype: RelationType\n  schemaid: Schema\n  tofield: String\n  toobject: String\n}\n")])])]),n("p",[e._v("在以上定义中，fromfield表示关联关系在关联对象中的字段名称，fromobject表示关联关系中关联对象的类型名称（注意是“名称”），toobject是关联关系中，被关联对象的字段名称，toobject表示关联关系中，被关联对象的对象名称,ifcascade表示是否级联删除，invisible_roles表示这个关联关系可以被哪些角色看见，不可见的角色不可以通过fromfield或tofield找对对应的关联对象或被关联对象信息。irrevisible_roles表示不可以更改关联关系角色名单，在这个名单中的角色不可以设置关联关系。\nrelationtpe表示关联关系类型，有4种关联关系")]),e._v(" "),n("ul",[n("li",[e._v("one2one，表示关联对象和被关联对象是一对一的关系")]),e._v(" "),n("li",[e._v("one2many，表示关联对象和被关联对象是一对多的关系")]),e._v(" "),n("li",[e._v("many2one，表示关联对象和被关联对象是多对1的关系")]),e._v(" "),n("li",[e._v("many2many，表示关联对象和被关联对象是多对多的关系")])]),e._v(" "),n("p",[e._v("只有one2one和one2many这两种关联关系可以设置ifcascade为true")]),e._v(" "),n("h2",{attrs:{id:"relationfieldmany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#relationfieldmany"}},[e._v("#")]),e._v(" RelationFieldMany")]),e._v(" "),n("p",[e._v("这个API用于根据条件查询关联关系，它接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("where，RelationFieldWhereInput的参数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input RelationFieldWhereInput  {\n  and: [RelationFieldWhereInput]\n  field_contains: [String]\n  filter: RelationFieldFieldFilter\n  not: RelationFieldWhereInput\n  or: [RelationFieldWhereInput]\n}\ninput RelationFieldFieldFilter  {\n  fromfield: StringFilter\n  fromobject: StringFilter\n  id: IDFilter\n  ifcascade: BoolFilter\n  invisible_roles: Role_EnumListFilter\n  irrevisible_roles: Role_EnumListFilter\n  relations: RelationFieldFieldFilter\n  relationtype: RelationType_EnumFilter\n  tofield: StringFilter\n  toobject: StringFilter\n}\n")])])]),n("ul",[n("li",[e._v('orderby,一个String字符串，支持多字段排序，可以支持排序的字段类型为提供了比较操作符的标量类型字段，格式为"字段1，字段2，desc|asc"。')]),e._v(" "),n("li",[e._v("limit,返回的记录条数")]),e._v(" "),n("li",[e._v("skip，跳过前多少条")])]),e._v(" "),n("p",[e._v("返回值为RelationField的列表,RelationField的定义为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type RelationField   {\n  fromfield: String\n  fromobject: String\n  id: ID\n  ifcascade: Boolean\n  invisible_roles: [Role]\n  irrevisible_roles: [Role]\n  relationtype: RelationType\n  schemaid: Schema\n  tofield: String\n  toobject: String\n}\n")])])]),n("p",[e._v("在以上定义中，fromfield表示关联关系在关联对象中的字段名称，fromobject表示关联关系中关联对象的类型名称（注意是“名称”），toobject是关联关系中，被关联对象的字段名称，toobject表示关联关系中，被关联对象的对象名称,ifcascade表示是否级联删除，invisible_roles表示这个关联关系可以被哪些角色看见，不可见的角色不可以通过fromfield或tofield找对对应的关联对象或被关联对象信息。irrevisible_roles表示不可以更改关联关系角色名单，在这个名单中的角色不可以设置关联关系。\nrelationtpe表示关联关系类型，有4种关联关系")]),e._v(" "),n("ul",[n("li",[e._v("one2one，表示关联对象和被关联对象是一对一的关系")]),e._v(" "),n("li",[e._v("one2many，表示关联对象和被关联对象是一对多的关系")]),e._v(" "),n("li",[e._v("many2one，表示关联对象和被关联对象是多对1的关系")]),e._v(" "),n("li",[e._v("many2many，表示关联对象和被关联对象是多对多的关系")])]),e._v(" "),n("p",[e._v("只有one2one和one2many这两种关联关系可以设置ifcascade为true")]),e._v(" "),n("h2",{attrs:{id:"relationfieldlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#relationfieldlistener"}},[e._v("#")]),e._v(" RelationFieldListener")]),e._v(" "),n("p",[e._v("这是关联关系监听器，可以监听EasyGQL引擎中Schema中对象之间关联关系的变化，它接收三个参数：")]),e._v(" "),n("ul",[n("li",[e._v("select,select是一个map型的参数,具体定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input RelationField_FieldsMap  {\n fromfield: Boolean = false\n fromobject: Boolean = false\n ifcascade: Boolean = false\n invisible_roles: Boolean = false\n irrevisible_roles: Boolean = false\n relationtype: Boolean = false\n schemaid: Boolean = false\n tofield: Boolean = false\n toobject: Boolean = false\n}\n\n")])])]),n("p",[e._v("在select中，必须有一个字段为true")]),e._v(" "),n("ul",[n("li",[e._v("watch，watch和select一样时一个map型参数，定义同select定义。")]),e._v(" "),n("li",[e._v("where,RelationFieldWhereInput型参数（具体使用方法同RelationFieldMany），表示监听数据的范围。\n返回值有三个部分：")]),e._v(" "),n("li",[e._v("action： insert、update、delete。")]),e._v(" "),n("li",[e._v("old_val: 变更之前的值")]),e._v(" "),n("li",[e._v("new_val: 变更之后的值")])]),e._v(" "),n("h2",{attrs:{id:"scalarfieldsincontenttype-objectinput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scalarfieldsincontenttype-objectinput"}},[e._v("#")]),e._v(" scalarfieldsInContentType_ObjectInput")]),e._v(" "),n("p",[e._v("这个API用于在ContentType对象类型中增加标量字段，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，ContentType的ID，必填要素")]),e._v(" "),n("li",[e._v("reset,true或者false表示是否重置，默认为false")]),e._v(" "),n("li",[e._v("to_object,一个ScalarFieldInput的类型的数组，因为scalarfields字段是数组，所以to_object可以为0到N个ScalarFieldInput对象。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("inputNestIDList，表示新创建的标量字段ID列表。")])]),e._v(" "),n("p",[e._v("ScalarFieldInput这个字段的定义如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('input ScalarFieldInput  {\n  defaultvalue: String\n  description: String = ""\n  id: ID\n  invisible_roles: [Role]\n  irrevisible_roles: [Role]\n  islist: Boolean = false\n  name: String!\n  notnull: Boolean = false\n  type: ScalarType!\n}\n')])])]),n("p",[e._v("在以上定义中，type表示标量字段对应的标量类型，notnull表示该字段是否可以为空，islist 表示该字段是否可以为一个数组，invisible_roles表示这个标量字段可以被哪些角色看见，不可见的角色通过查询语句找对对应的标量字段信息，irrevisible_roles表示不可以更改标量字段的角色名单，在这个名单中的角色不可以修改标量字段，注意：不可以看见标量字段肯定不能修改标量字段。")]),e._v(" "),n("h2",{attrs:{id:"scalarfieldsincontenttype-nestremove"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scalarfieldsincontenttype-nestremove"}},[e._v("#")]),e._v(" scalarfieldsInContentType_NestRemove")]),e._v(" "),n("p",[e._v("这个API是在ContentType中删除标量字段用的，：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，ContentType的ID，必填要素。")]),e._v(" "),n("li",[e._v("to_id,标量字段的ID列表。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"scalarfieldupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scalarfieldupdate"}},[e._v("#")]),e._v(" ScalarFieldUpdate")]),e._v(" "),n("p",[e._v("这个API是标量字段更新用的，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("object,ScalarFieldUpdateInput类型字段，表示需要更新的字段，ScalarFieldUpdateInput的所有属性都是非必填的，仅对输入的要输进行更新。ScalarFieldUpdateInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input ScalarFieldUpdateInput  {\n  defaultvalue: String\n  description: String\n  invisible_roles: [Role]\n  irrevisible_roles: [Role]\n  islist: Boolean\n  name: String\n  notnull: Boolean\n  type: ScalarType\n}\n\n")])])]),n("ul",[n("li",[e._v("where,ScalarFieldWhereInput类型的字段，用以确定数据更新的范围。ScalarFieldWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input ScalarFieldWhereInput  {\n  and: [ScalarFieldWhereInput]\n  field_contains: [String]\n  filter: ScalarFieldFieldFilter\n  not: ScalarFieldWhereInput\n  or: [ScalarFieldWhereInput]\n}\ninput ScalarFieldFieldFilter  {\n  defaultvalue: StringFilter\n  description: StringFilter\n  id: IDFilter\n  invisible_roles: Role_EnumListFilter\n  irrevisible_roles: Role_EnumListFilter\n  islist: BoolFilter\n  name: StringFilter\n  notnull: BoolFilter\n  scalarfields: ScalarFieldFieldFilter\n  type: ScalarType_EnumFilter\n}\n\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"scalarfielddestroy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scalarfielddestroy"}},[e._v("#")]),e._v(" ScalarFieldDestroy")]),e._v(" "),n("p",[e._v("这个API是按条件删除已经定义好的标量字段，它接收一个参数")]),e._v(" "),n("ul",[n("li",[e._v("where,ScalarFieldWhereInput类型的字段，用以确定删除数据的范围。ScalarFieldWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input ScalarFieldWhereInput  {\n  and: [ScalarFieldWhereInput]\n  field_contains: [String]\n  filter: ScalarFieldFieldFilter\n  not: ScalarFieldWhereInput\n  or: [ScalarFieldWhereInput]\n}\ninput ScalarFieldFieldFilter  {\n  defaultvalue: StringFilter\n  description: StringFilter\n  id: IDFilter\n  invisible_roles: Role_EnumListFilter\n  irrevisible_roles: Role_EnumListFilter\n  islist: BoolFilter\n  name: StringFilter\n  notnull: BoolFilter\n  scalarfields: ScalarFieldFieldFilter\n  type: ScalarType_EnumFilter\n}\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"scalarfield"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scalarfield"}},[e._v("#")]),e._v(" ScalarField")]),e._v(" "),n("p",[e._v("这个API用于根据ID查询标量字段，它接收一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("id，表示要查询的标量字段的ID\n它返回一个ScalarField字段或null，ScalarField字段的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type ScalarField  {\ncontenttype: ContentType\ndefaultvalue: String\ndescription: String\nid: ID\ninvisible_roles: [Role]\nirrevisible_roles: [Role]\nislist: Boolean\nname: String\nnotnull: Boolean\ntype: ScalarType\n}\n")])])]),n("p",[e._v("在以上定义中，type表示标量字段对应的标量类型，notnull表示该字段是否可以为空，islist 表示该字段是否可以为一个数组，invisible_roles表示这个标量字段可以被哪些角色看见，不可见的角色通过查询语句找对对应的标量字段信息，irrevisible_roles表示不可以更改标量字段的角色名单，在这个名单中的角色不可以修改标量字段，注意：不可以看见标量字段肯定不能修改标量字段。")]),e._v(" "),n("h2",{attrs:{id:"scalarfieldmany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scalarfieldmany"}},[e._v("#")]),e._v(" ScalarFieldMany")]),e._v(" "),n("p",[e._v("这个API用于根据条件查询标量字段，它接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("where，ScalarFieldWhereInput的参数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input ScalarFieldWhereInput  {\n  and: [ScalarFieldWhereInput]\n  field_contains: [String]\n  filter: ScalarFieldFieldFilter\n  not: ScalarFieldWhereInput\n  or: [ScalarFieldWhereInput]\n}\ninput ScalarFieldFieldFilter  {\n  defaultvalue: StringFilter\n  description: StringFilter\n  id: IDFilter\n  invisible_roles: Role_EnumListFilter\n  irrevisible_roles: Role_EnumListFilter\n  islist: BoolFilter\n  name: StringFilter\n  notnull: BoolFilter\n  scalarfields: ScalarFieldFieldFilter\n  type: ScalarType_EnumFilter\n}\n")])])]),n("ul",[n("li",[e._v('orderby,一个String字符串，支持多字段排序，可以支持排序的字段类型为提供了比较操作符的标量类型字段，格式为"字段1，字段2，desc|asc"。')]),e._v(" "),n("li",[e._v("limit,返回的记录条数")]),e._v(" "),n("li",[e._v("skip，跳过前多少条")])]),e._v(" "),n("p",[e._v("返回值为ScalarField的列表,ScalarField的定义为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type ScalarField  {\n contenttype: ContentType\n defaultvalue: String\n description: String\n id: ID\n invisible_roles: [Role]\n irrevisible_roles: [Role]\n islist: Boolean\n name: String\n notnull: Boolean\n type: ScalarType\n}\n")])])]),n("p",[e._v("在以上定义中，type表示标量字段对应的标量类型，notnull表示该字段是否可以为空，islist 表示该字段是否可以为一个数组，invisible_roles表示这个标量字段可以被哪些角色看见，不可见的角色通过查询语句找对对应的标量字段信息，irrevisible_roles表示不可以更改标量字段的角色名单，在这个名单中的角色不可以修改标量字段，注意：不可以看见标量字段肯定不能修改标量字段。")]),e._v(" "),n("h2",{attrs:{id:"scalarfieldlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scalarfieldlistener"}},[e._v("#")]),e._v(" ScalarFieldListener")]),e._v(" "),n("p",[e._v("这是标量字段监听器，可以监听EasyGQL引擎中Schema的标量字段变化，它接收三个参数：")]),e._v(" "),n("ul",[n("li",[e._v("select,select是一个map型的参数,具体定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input ScalarField_FieldsMap   {\n contenttype: Boolean = false\n defaultvalue: Boolean = false\n description: Boolean = false\n invisible_roles: Boolean = false\n irrevisible_roles: Boolean = false\n islist: Boolean = false\n name: Boolean = false\n notnull: Boolean = false\n type: Boolean = false\n}\n\n")])])]),n("p",[e._v("在select中，必须有一个字段为true")]),e._v(" "),n("ul",[n("li",[e._v("watch，watch和select一样时一个map型参数，定义同select定义。")]),e._v(" "),n("li",[e._v("where,ScalarFieldWhereInput型参数（具体使用方法同ScalarFieldMany），表示监听数据的范围。\n返回值有三个部分：")]),e._v(" "),n("li",[e._v("action： insert、update、delete。")]),e._v(" "),n("li",[e._v("old_val: 变更之前的值")]),e._v(" "),n("li",[e._v("new_val: 变更之后的值")])]),e._v(" "),n("h2",{attrs:{id:"enumfieldsincontenttype-objectinput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumfieldsincontenttype-objectinput"}},[e._v("#")]),e._v(" enumfieldsInContentType_ObjectInput")]),e._v(" "),n("p",[e._v("这个API用于在ContentType对象类型中增加枚举字段，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，ContentType的ID，必填要素")]),e._v(" "),n("li",[e._v("reset,true或者false表示是否重置，默认为false")]),e._v(" "),n("li",[e._v("to_object,一个EnumFieldInput的类型的数组，因为enumfields字段是数组，所以to_object可以为0到N个EnumFieldInput对象。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("inputNestIDList，表示新创建的枚举字段ID列表。")])]),e._v(" "),n("p",[e._v("EnumFieldInput这个字段的定义如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumFieldInput {\n  defaultvalue: Object\n  id: ID\n  invisible_roles: [Role]\n  irrevisible_roles: [Role]\n  islist: Boolean = false\n  name: String!\n  type: String!\n}\n")])])]),n("p",[e._v("在以上定义中，type表示标量字段对应的枚举类型，notnull表示该字段是否可以为空，islist 表示该字段是否可以为一个数组，invisible_roles表示这个枚举字段可以被哪些角色看见，不可见的角色通过查询语句找对对应的枚举字段信息，irrevisible_roles表示不可以更改枚举字段的角色名单，在这个名单中的角色不可以修改枚举字段，注意：不可以看见枚举字段肯定不能修枚举量字段。")]),e._v(" "),n("h2",{attrs:{id:"enumfieldsincontenttype-nestremove"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumfieldsincontenttype-nestremove"}},[e._v("#")]),e._v(" enumfieldsInContentType_NestRemove")]),e._v(" "),n("p",[e._v("这个API是在ContentType中删除枚举字段用的，：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，ContentType的ID，必填要素。")]),e._v(" "),n("li",[e._v("to_id,枚举字段的ID列表。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"enumfieldupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumfieldupdate"}},[e._v("#")]),e._v(" EnumFieldUpdate")]),e._v(" "),n("p",[e._v("这个API是枚举字段更新用的，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("object,EnumFieldUpdateInput类型字段，表示需要更新的字段，EnumFieldUpdateInput的所有属性都是非必填的，仅对输入的要输进行更新。EnumFieldUpdateInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumFieldUpdateInput  {\n  defaultvalue: Object\n  invisible_roles: [Role]\n  irrevisible_roles: [Role]\n  islist: Boolean\n  name: String\n  type: String\n}\n")])])]),n("ul",[n("li",[e._v("where,EnumFieldWhereInput类型的字段，用以确定数据更新的范围。EnumFieldWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumFieldWhereInput  {\n  and: [EnumFieldWhereInput]\n  field_contains: [String]\n  filter: EnumFieldFieldFilter\n  not: EnumFieldWhereInput\n  or: [EnumFieldWhereInput]\n}\ninput EnumFieldFieldFilter  {\n  defaultvalue: StringFilter\n  description: StringFilter\n  id: IDFilter\n  invisible_roles: Role_EnumListFilter\n  irrevisible_roles: Role_EnumListFilter\n  islist: BoolFilter\n  name: StringFilter\n  notnull: BoolFilter\n  scalarfields: ScalarFieldFieldFilter\n  type: ScalarType_EnumFilter\n}\n\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"enumfielddestroy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumfielddestroy"}},[e._v("#")]),e._v(" EnumFieldDestroy")]),e._v(" "),n("p",[e._v("这个API是按条件删除已经定义好的枚举类型字段，它接收一个参数")]),e._v(" "),n("ul",[n("li",[e._v("where,EnumFieldWhereInput类型的字段，用以确定删除数据的范围。EnumFieldWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumFieldWhereInput  {\n  and: [EnumFieldWhereInput]\n  field_contains: [String]\n  filter: EnumFieldFieldFilter\n  not: EnumFieldWhereInput\n  or: [EnumFieldWhereInput]\n}\ninput EnumFieldFieldFilter  {\n  enumfields: EnumFieldFieldFilter\n  id: IDFilter\n  invisible_roles: Role_EnumListFilter\n  irrevisible_roles: Role_EnumListFilter\n  islist: BoolFilter\n  name: StringFilter\n  type: StringFilter\n}\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"enumfield"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumfield"}},[e._v("#")]),e._v(" EnumField")]),e._v(" "),n("p",[e._v("这个API是根据枚举类型字段的ID，查询枚举字段内容，它接收1个参数：")]),e._v(" "),n("ul",[n("li",[e._v("id,枚举字段的ID\n返回它返回一个EnumField字段或null，EnumField字段的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type EnumField  {\n contenttype: ContentType\n defaultvalue: Object\n id: ID\n invisible_roles: [Role]\n irrevisible_roles: [Role]\n islist: Boolean\n name: String\n type: String\n}\n")])])]),n("p",[e._v("在以上定义中，type表示标量字段对应的枚举类型，notnull表示该字段是否可以为空，islist 表示该字段是否可以为一个数组，invisible_roles表示这个枚举字段可以被哪些角色看见，不可见的角色通过查询语句找对对应的枚举字段信息，irrevisible_roles表示不可以更改枚举字段的角色名单，在这个名单中的角色不可以修改枚举字段，注意：不可以看见枚举字段肯定不能修枚举量字段。")]),e._v(" "),n("h2",{attrs:{id:"enumfieldmany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumfieldmany"}},[e._v("#")]),e._v(" EnumFieldMany")]),e._v(" "),n("p",[e._v("这个API用于根据条件查询枚举字段，它接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("where，EnumFieldWhereInput的参数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumFieldWhereInput  {\n  and: [EnumFieldWhereInput]\n  field_contains: [String]\n  filter: EnumFieldFieldFilter\n  not: EnumFieldWhereInput\n  or: [EnumFieldWhereInput]\n}\ninput EnumFieldFieldFilter  {\n  enumfields: EnumFieldFieldFilter\n  id: IDFilter\n  invisible_roles: Role_EnumListFilter\n  irrevisible_roles: Role_EnumListFilter\n  islist: BoolFilter\n  name: StringFilter\n  type: StringFilter\n}\n")])])]),n("ul",[n("li",[e._v('orderby,一个String字符串，支持多字段排序，可以支持排序的字段类型为提供了比较操作符的标量类型字段，格式为"字段1，字段2，desc|asc"。')]),e._v(" "),n("li",[e._v("limit,返回的记录条数")]),e._v(" "),n("li",[e._v("skip，跳过前多少条")])]),e._v(" "),n("p",[e._v("返回值为EnumField的列表,EnumField的定义为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" type EnumField  {\n  contenttype: ContentType\n  defaultvalue: Object\n  id: ID\n  invisible_roles: [Role]\n  irrevisible_roles: [Role]\n  islist: Boolean\n  name: String\n  type: String\n}\n")])])]),n("p",[e._v("在以上定义中，type表示标量字段对应的枚举类型，notnull表示该字段是否可以为空，islist 表示该字段是否可以为一个数组，invisible_roles表示这个枚举字段可以被哪些角色看见，不可见的角色通过查询语句找对对应的枚举字段信息，irrevisible_roles表示不可以更改枚举字段的角色名单，在这个名单中的角色不可以修改枚举字段，注意：不可以看见枚举字段肯定不能修枚举量字段。")]),e._v(" "),n("h2",{attrs:{id:"enumfieldlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumfieldlistener"}},[e._v("#")]),e._v(" EnumFieldListener")]),e._v(" "),n("p",[e._v("这是枚举字段监听器，可以监听EasyGQL引擎中Schema的枚举字段变化，它接收三个参数：")]),e._v(" "),n("ul",[n("li",[e._v("select,select是一个map型的参数,具体定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input EnumField_FieldsMap  {\n contenttype: Boolean = false\n defaultvalue: Boolean = false\n invisible_roles: Boolean = false\n irrevisible_roles: Boolean = false\n islist: Boolean = false\n name: Boolean = false\n type: Boolean = false\n}\n\n")])])]),n("p",[e._v("在select中，必须有一个字段为true")]),e._v(" "),n("ul",[n("li",[e._v("watch，watch和select一样时一个map型参数，定义同select定义。")]),e._v(" "),n("li",[e._v("where,EnumFieldWhereInput型参数（具体使用方法同ScalarFieldMany），表示监听数据的范围。\n返回值有三个部分：")]),e._v(" "),n("li",[e._v("action： insert、update、delete。")]),e._v(" "),n("li",[e._v("old_val: 变更之前的值")]),e._v(" "),n("li",[e._v("new_val: 变更之后的值")])]),e._v(" "),n("h2",{attrs:{id:"triggersinschema-objectinput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#triggersinschema-objectinput"}},[e._v("#")]),e._v(" triggersInSchema_ObjectInput")]),e._v(" "),n("p",[e._v("这个API用于在Schema中为各个ContenType类型的对象中增加触发器，当具体对象类型的对应数据对象发生变化时，会调用外部的Restful API,达到和外部API集成的目的，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，Schema的ID，必填要素")]),e._v(" "),n("li",[e._v("reset,true或者false表示是否重置，默认为false")]),e._v(" "),n("li",[e._v("to_object,一个TriggerInput的类型的数组，因为trigggers字段是数组，所以to_object可以为0到N个TriggerInput对象。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("inputNestIDList，表示新创建的触发器的ID列表。")])]),e._v(" "),n("p",[e._v("TriggerInput这个字段的定义如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('input TriggerInput  {\n  description: String = ""\n  eventtype: [Event]\n  expiredate: Date!\n  headers: Object\n  id: ID\n  name: String!\n  ok_status: String = "200"\n  payloadargs: [String]\n  payloadformatter: String\n  retry_times: Int = 3\n  startdate: Date!\n  typename: String!\n  webhookurl: String!\n}\n')])])]),n("p",[e._v("在以上定义中")]),e._v(" "),n("ul",[n("li",[e._v("eventtype表示触发器触发的事件时什么，可以为insert、update、delete的组合。")]),e._v(" "),n("li",[e._v("expirdate表示触发器对应配置的失效时间")]),e._v(" "),n("li",[e._v("startdate表示触发器对应配置的生效时间")]),e._v(" "),n("li",[e._v("headers表示触发器对应文件头的一个对象，实际在使用的时候，可以理解为一个JSON的键值对")]),e._v(" "),n("li",[e._v("id,为自定义的ID")]),e._v(" "),n("li",[e._v("name,表示触发器的名字")]),e._v(" "),n("li",[e._v("ok_status,表示判断RestAPI 调用成功的标识状态码")]),e._v(" "),n("li",[e._v("payloadargs，是一个数组，数组中的字段为对应ContentType对象的属性字段名，和payloadformater中的变量相对应。")]),e._v(" "),n("li",[e._v("payloadformater，是RestAPI对应payload的字符串表示，payloadformater的格式对应为Stringformater的格式")]),e._v(" "),n("li",[e._v("retry_times表示失败重试次数")]),e._v(" "),n("li",[e._v("typename表示对应ContentType的名字")]),e._v(" "),n("li",[e._v("webhookurl，表示对应RestAPI的地址。")])]),e._v(" "),n("h2",{attrs:{id:"triggersinschema-nestremove"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#triggersinschema-nestremove"}},[e._v("#")]),e._v(" triggersInSchema_NestRemove")]),e._v(" "),n("p",[e._v("这个API是在Schema中删除触发器用的，：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，Schema的ID，必填要素。")]),e._v(" "),n("li",[e._v("to_id,触发器的ID列表。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"triggerupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#triggerupdate"}},[e._v("#")]),e._v(" TriggerUpdate")]),e._v(" "),n("p",[e._v("这个API用于更新触发器\n这个API是枚举字段更新用的，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("object,TriggerUpdateInput类型字段，表示需要更新的字段，TriggerUpdateInput的所有属性都是非必填的，仅对输入的要输进行更新。TriggerUpdateInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input TriggerUpdateInput{\n  description: String\n  eventtype: [Event]\n  expiredate: Date\n  headers: Object\n  name: String\n  ok_status: String\n  payloadargs: [String]\n  payloadformatter: String\n  retry_times: Int\n  startdate: Date\n  typename: String\n  webhookurl: String\n}\n")])])]),n("ul",[n("li",[e._v("where,TriggerWhereInput类型的字段，用以确定数据更新的范围。TriggerWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input TriggerWhereInput   {\n  and: [TriggerWhereInput]\n  field_contains: [String]\n  filter: TriggerFieldFilter\n  not: TriggerWhereInput\n  or: [TriggerWhereInput]\n}\ninput TriggerFieldFilter  {\n  description: StringFilter\n  eventtype: Event_EnumListFilter\n  expiredate: StringFilter\n  id: IDFilter\n  name: StringFilter\n  ok_status: StringFilter\n  payloadargs: StringListWhereInput\n  payloadformatter: StringFilter\n  retry_times: IntFilter\n  startdate: StringFilter\n  triggers: TriggerFieldFilter\n  typename: StringFilter\n  webhookurl: StringFilter\n}\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"triggerdestroy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#triggerdestroy"}},[e._v("#")]),e._v(" TriggerDestroy")]),e._v(" "),n("p",[e._v("这个API是按条件删除已经定义好的触发器，它接收一个参数")]),e._v(" "),n("ul",[n("li",[e._v("where,TriggerWhereInput类型的字段，用以确定删除数据的范围。TriggerWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input TriggerWhereInput   {\n  and: [TriggerWhereInput]\n  field_contains: [String]\n  filter: TriggerFieldFilter\n  not: TriggerWhereInput\n  or: [TriggerWhereInput]\n}\ninput TriggerFieldFilter  {\n  description: StringFilter\n  eventtype: Event_EnumListFilter\n  expiredate: StringFilter\n  id: IDFilter\n  name: StringFilter\n  ok_status: StringFilter\n  payloadargs: StringListWhereInput\n  payloadformatter: StringFilter\n  retry_times: IntFilter\n  startdate: StringFilter\n  triggers: TriggerFieldFilter\n  typename: StringFilter\n  webhookurl: StringFilter\n}\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"trigger"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#trigger"}},[e._v("#")]),e._v(" Trigger")]),e._v(" "),n("p",[e._v("根据ID查询Trigger的API，它接收1个参数：")]),e._v(" "),n("ul",[n("li",[e._v("id，触发器的ID\n返回它返回一个Trigger对象或null，Triggr字段的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Trigger  {\n description: String\n eventtype: [Event]\n expiredate: Date\n headers: Object\n id: ID\n name: String\n ok_status: String\n payloadargs: [String]\n payloadformatter: String\n retry_times: Int\n schemaid: Schema\n startdate: Date\n typename: String\n webhookurl: String\n}\n")])])]),n("p",[e._v("在以上定义中")]),e._v(" "),n("ul",[n("li",[e._v("eventtype表示触发器触发的事件时什么，可以为insert、update、delete的组合。")]),e._v(" "),n("li",[e._v("expirdate表示触发器对应配置的失效时间")]),e._v(" "),n("li",[e._v("startdate表示触发器对应配置的生效时间")]),e._v(" "),n("li",[e._v("headers表示触发器对应文件头的一个对象，实际在使用的时候，可以理解为一个JSON的键值对")]),e._v(" "),n("li",[e._v("id,为自定义的ID")]),e._v(" "),n("li",[e._v("name,表示触发器的名字")]),e._v(" "),n("li",[e._v("ok_status,表示判断RestAPI 调用成功的标识状态码")]),e._v(" "),n("li",[e._v("payloadargs，是一个数组，数组中的字段为对应ContentType对象的属性字段名，和payloadformater中的变量相对应。")]),e._v(" "),n("li",[e._v("payloadformater，是RestAPI对应payload的字符串表示，payloadformater的格式对应为Stringformater的格式")]),e._v(" "),n("li",[e._v("retry_times表示失败重试次数")]),e._v(" "),n("li",[e._v("typename表示对应ContentType的名字")]),e._v(" "),n("li",[e._v("webhookurl，表示对应RestAPI的地址。")]),e._v(" "),n("li",[e._v("schemaid，表示触发器所属Schema")])]),e._v(" "),n("h2",{attrs:{id:"triggermany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#triggermany"}},[e._v("#")]),e._v(" TriggerMany")]),e._v(" "),n("p",[e._v("这个API用于根据条件查询触发器，它接收的参数有：")]),e._v(" "),n("ul",[n("li",[e._v("where，TriggerWhereInput的参数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input TriggerWhereInput  {\n  and: [EnumFieldWhereInput]\n  field_contains: [String]\n  filter: EnumFieldFieldFilter\n  not: EnumFieldWhereInput\n  or: [EnumFieldWhereInput]\n}\ninput TriggerFieldFieldFilter  {\n  enumfields: EnumFieldFieldFilter\n  id: IDFilter\n  invisible_roles: Role_EnumListFilter\n  irrevisible_roles: Role_EnumListFilter\n  islist: BoolFilter\n  name: StringFilter\n  type: StringFilter\n}\n")])])]),n("ul",[n("li",[e._v('orderby,一个String字符串，支持多字段排序，可以支持排序的字段类型为提供了比较操作符的标量类型字段，格式为"字段1，字段2，desc|asc"。')]),e._v(" "),n("li",[e._v("limit,返回的记录条数")]),e._v(" "),n("li",[e._v("skip，跳过前多少条")])]),e._v(" "),n("p",[e._v("返回值为Trigger的列表,Trigger的定义为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Trigger  {\n  description: String\n  eventtype: [Event]\n  expiredate: Date\n  headers: Object\n  id: ID\n  name: String\n  ok_status: String\n  payloadargs: [String]\n  payloadformatter: String\n  retry_times: Int\n  schemaid: Schema\n  startdate: Date\n  typename: String\n  webhookurl: String\n}\n")])])]),n("p",[e._v("在以上定义中")]),e._v(" "),n("ul",[n("li",[e._v("eventtype表示触发器触发的事件时什么，可以为insert、update、delete的组合。")]),e._v(" "),n("li",[e._v("expirdate表示触发器对应配置的失效时间")]),e._v(" "),n("li",[e._v("startdate表示触发器对应配置的生效时间")]),e._v(" "),n("li",[e._v("headers表示触发器对应文件头的一个对象，实际在使用的时候，可以理解为一个JSON的键值对")]),e._v(" "),n("li",[e._v("id,为自定义的ID")]),e._v(" "),n("li",[e._v("name,表示触发器的名字")]),e._v(" "),n("li",[e._v("ok_status,表示判断RestAPI 调用成功的标识状态码")]),e._v(" "),n("li",[e._v("payloadargs，是一个数组，数组中的字段为对应ContentType对象的属性字段名，和payloadformater中的变量相对应。")]),e._v(" "),n("li",[e._v("payloadformater，是RestAPI对应payload的字符串表示，payloadformater的格式对应为Stringformater的格式")]),e._v(" "),n("li",[e._v("retry_times表示失败重试次数")]),e._v(" "),n("li",[e._v("typename表示对应ContentType的名字")]),e._v(" "),n("li",[e._v("webhookurl，表示对应RestAPI的地址。")]),e._v(" "),n("li",[e._v("schemaid，表示触发器所属Schema")])]),e._v(" "),n("h2",{attrs:{id:"triggerlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#triggerlistener"}},[e._v("#")]),e._v(" TriggerListener")]),e._v(" "),n("p",[e._v("这是触发器监听器，可以监听EasyGQL引擎中Schema的触发器，它接收三个参数：")]),e._v(" "),n("ul",[n("li",[e._v("select,select是一个map型的参数,具体定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input Trigger_FieldsMap  {\n description: Boolean = false\n eventtype: Boolean = false\n expiredate: Boolean = false\n headers: Boolean = false\n name: Boolean = false\n ok_status: Boolean = false\n payloadargs: Boolean = false\n payloadformatter: Boolean = false\n retry_times: Boolean = false\n schemaid: Boolean = false\n startdate: Boolean = false\n typename: Boolean = false\n webhookurl: Boolean = false\n}\n")])])]),n("p",[e._v("在select中，必须有一个字段为true")]),e._v(" "),n("ul",[n("li",[e._v("watch，watch和select一样时一个map型参数，定义同select定义。")]),e._v(" "),n("li",[e._v("where,TriggerWhereInput型参数（具体使用方法同TriggerMany），表示监听数据的范围。\n返回值有三个部分：")]),e._v(" "),n("li",[e._v("action： insert、update、delete。")]),e._v(" "),n("li",[e._v("old_val: 变更之前的值")]),e._v(" "),n("li",[e._v("new_val: 变更之后的值。")])]),e._v(" "),n("h2",{attrs:{id:"unique-constraintsincontenttype-objectinput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unique-constraintsincontenttype-objectinput"}},[e._v("#")]),e._v(" unique_constraintsInContentType_ObjectInput")]),e._v(" "),n("p",[e._v("这个API用于在ContetnType类型中为添加唯一索引，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，Contetnt的ID，必填要素")]),e._v(" "),n("li",[e._v("reset,true或者false表示是否重置，默认为false")]),e._v(" "),n("li",[e._v("to_object,一个UniqueConstraint的类型的数组，因为unique_constraints字段是数组，所以to_object可以为0到N个UniqueConstraint对象。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("inputNestIDList，表示新创建的唯一索引的ID列表。")])]),e._v(" "),n("p",[e._v("TriggerInput这个字段的定义如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input UniqueConstraintInput  {\n  fields: [String]\n  id: ID\n}\n")])])]),n("p",[e._v("在以上定义中")]),e._v(" "),n("ul",[n("li",[e._v("fields，表示唯一索引字段的列表，可以包含关联关系字段。")])]),e._v(" "),n("h2",{attrs:{id:"unique-constraintsincontenttype-nestremove"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unique-constraintsincontenttype-nestremove"}},[e._v("#")]),e._v(" unique_constraintsInContentType_NestRemove")]),e._v(" "),n("p",[e._v("这个API是在ContentType中删除唯一索引用的，：")]),e._v(" "),n("ul",[n("li",[e._v("from_id，ContentType的ID，必填要素。")]),e._v(" "),n("li",[e._v("to_id,唯一索引的ID列表。\n这个API的返回值有：")]),e._v(" "),n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"uniqueconstraintupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uniqueconstraintupdate"}},[e._v("#")]),e._v(" UniqueConstraintUpdate")]),e._v(" "),n("p",[e._v("这个API用于更新唯一索引，它接收以下参数：")]),e._v(" "),n("ul",[n("li",[e._v("object,UniqueConstraintUpdateInput类型字段，表示需要更新的字段，UniqueConstraintUpdateInput的所有属性都是非必填的，仅对输入的要输进行更新。UniqueConstraintUpdateInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input UniqueConstraintUpdateInput {\n  fields: [String]\n}\n")])])]),n("ul",[n("li",[e._v("where,UniqueConstraintWhereInput类型的字段，用以确定数据更新的范围。UniqueConstraintWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input UniqueConstraintWhereInput  {\n  and: [UniqueConstraintWhereInput]\n  field_contains: [String]\n  filter: UniqueConstraintFieldFilter\n  not: UniqueConstraintWhereInput\n  or: [UniqueConstraintWhereInput]\n}\ninput UniqueConstraintFieldFilter {\n  fields: StringListWhereInput\n  id: IDFilter\n}\n\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"uniqueconstraintdestroy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uniqueconstraintdestroy"}},[e._v("#")]),e._v(" UniqueConstraintDestroy")]),e._v(" "),n("p",[e._v("这个API是按条件删除已经定义好的唯一索引，它接收一个参数")]),e._v(" "),n("ul",[n("li",[e._v("where,UniqueConstraintWhereInput类型的字段，用以确定删除数据的范围。UniqueConstraintWhereInput的定义如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("input UniqueConstraintWhereInput  {\n  and: [UniqueConstraintWhereInput]\n  field_contains: [String]\n  filter: UniqueConstraintFieldFilter\n  not: UniqueConstraintWhereInput\n  or: [UniqueConstraintWhereInput]\n}\ninput UniqueConstraintFieldFilter {\n  fields: StringListWhereInput\n  id: IDFilter\n}\n\n")])])]),n("p",[e._v("它返回一个参数：")]),e._v(" "),n("ul",[n("li",[e._v("affected_rows，表示受影响的行数。")])]),e._v(" "),n("h2",{attrs:{id:"uniqueconstraintlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uniqueconstraintlistener"}},[e._v("#")]),e._v(" UniqueConstraintListener")]),e._v(" "),n("p",[e._v("这是唯一索引监听器，可以监听EasyGQL引擎中Schema的唯一索引变化，它接收三个参数：")]),e._v(" "),n("ul",[n("li",[e._v("select,select是一个map型的参数，{contenttype：true|fasle,fields:true|false}，在select中，必须有一个字段为true")]),e._v(" "),n("li",[e._v("watch，watch和select一样时一个map型参数，{contenttype：true|fasle,fields:true|false}，在watch中，必须有一个字段为true。")]),e._v(" "),n("li",[e._v("where,UniqueConstraintWhereInput型参数，表示监听数据的范围。\n返回值有三个部分：")]),e._v(" "),n("li",[e._v("action： insert、update、delete。")]),e._v(" "),n("li",[e._v("old_val: 变更之前的值")]),e._v(" "),n("li",[e._v("new_val: 变更之后的值。")])])])}),[],!1,null,null,null);t.default=i.exports}}]);