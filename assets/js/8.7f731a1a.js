(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{170:function(t,e,a){"use strict";a.r(e);var r=a(0),n=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"四、自定义类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、自定义类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 四、自定义类型")]),t._v(" "),a("h2",{attrs:{id:"_4-1-自定义类型的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-自定义类型的概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.1  自定义类型的概念")]),t._v(" "),a("p",[t._v("自定义类型的概念是用以区别标量类型的，标量类型是原子类型，自定义类型是用户勾选的标量类型以及自定义类型的集合。")]),t._v(" "),a("h2",{attrs:{id:"_4-2-自定义类型的字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-自定义类型的字段","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.2 自定义类型的字段")]),t._v(" "),a("p",[t._v("每个自定义类型都默认会自带一个id字段，类型为ID，其余字段为用户自己选择，CreatedAt和lastupdate字段，同一个自定义对象不能有两个。")]),t._v(" "),a("h2",{attrs:{id:"_4-3-自定义类型对象的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-自定义类型对象的操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.3 自定义类型对象的操作")]),t._v(" "),a("p",[t._v("待补充。")]),t._v(" "),a("h3",{attrs:{id:"_4-3-1-对象的新增"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-对象的新增","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.3.1 对象的新增")]),t._v(" "),a("p",[t._v("针对用户定义的每一个对象，EasyGQL会自动提供一个名为“对象名Create”的接口，输入参数为对象的数组和conflict配置，如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('chatCreate(conflict: String = "replace", objects: [chatInput]): insert_return\nCreatechatroom(conflict: String = "replace", objects: [chatroomInput]): insert_return\n')])])]),a("p",[t._v("conflict是一个冲突解决配置，默认为replace，表示当碰到ID重复的数据对象时进行整体替代，其他可选择值为update，update表示对冲突对象中重复的字段进行更新，原有的字段如果在插入的时候没有被声明将会保留。\nobjects 是对应对象的一个数组，对应输入对象的类型为“对象名Input”,例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("input chatInput {\n  chatroom: ID!\n  from: String!\n  id: ID\n  message: String!\n}\ninput chatroomInput {\n  id: ID\n  owner: String!\n}\n\n")])])]),a("p",[t._v("进行数据插入时，对应输入类型与之前定义的类型区别主要有：")]),t._v(" "),a("ul",[a("li",[t._v("增加了一个可选字段id,如果插入时不给该字段赋值，EasyGQL会自动赋予一个UUID为该数据对象的唯一主键。")]),t._v(" "),a("li",[t._v("在存在对象嵌套的情况下，用对应对象的id表示该对象。")])]),t._v(" "),a("p",[t._v("进行数据插入时返回值的格式如下有两部分组成：affectedrow表示被影响的行数,idlist表示插入数据的id列表：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type insert_return {\n  affectedrow: Int\n  idlist:[ID]\n}\n")])])]),a("p",[t._v("此外，EasyGQL会了避免前端长时间等待后台操作结果的返回，提供了不带任何返回值的新增接口，结构如下:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('chatCreateNoReply(conflict: String = "replace", objects: [chatInput]): Boolean\nchatroomCreateNoReply(conflict: String = "replace", objects: [chatroomInput]): Boolean\n')])])]),a("h3",{attrs:{id:"_4-3-2-对象的删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-对象的删除","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.3.2  对象的删除")]),t._v(" "),a("p",[t._v('针对用户定义的每一个对象，EasyGQL会提供一个名为"对象名Destory"数据删除接口，输入参数是查询条件。例如：')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("chatDestory(where: chatWhereFilter): delete_return\nchatroomDestory(where: chatroomWhereFilter): delete_return\n")])])]),a("p",[t._v("参数where为数据查询时的过滤条件，满足过滤条件的所有对象均会被删除。\n数据返回有三部分数据：affectedrow表示被影响的行数。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type delete_return {\n  affectedrow: Int\n}\n")])])]),a("p",[t._v("此外，EasyGQL会了避免前端长时间等待后台操作结果的返回，提供了不带任何返回值的删除接口，结构如下:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("chatDestoryNoReply(where: chatWhereFilter): Boolean\nchatroomDestoryNoReply(where: chatroomWhereFilter): Boolean\n")])])]),a("h3",{attrs:{id:"_4-3-3-对象的修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-对象的修改","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.3.3 对象的修改")]),t._v(" "),a("p",[t._v('针对用户定义的每一个对象，EasyGQL会提供一个"Update对象名"的数据更新接口，该接口接受两个参数：where表示查询条件，object表示待更新的值。例如：')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("chatUpdate(object: chatUpdateInput!, where: chatWhereFilter): update_return\nchatroomUpdate(object: chatroomUpdateInput!, where: chatroomWhereFilter): update_return\n")])])]),a("p",[t._v('object的对象类型是“对象名UpdateInput”，是必填字段。“对象名UpdateInput”与"对象名input"的区别是所有字段均为非必填字段。例如：')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("input chatUpdateInput {\n  chatroom: ID\n  from: String\n  id: ID\n  message: String\n}\ninput chatroomUpdateInput {\n  id: ID\n  owner: String\n}\n")])])]),a("p",[t._v("返回值有三部分内容：affectedrow表示更新的行数，例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type update_return {\n  affectedrow: Int\n}\n")])])]),a("p",[t._v("此外，EasyGQL会了避免前端长时间等待后台操作结果的返回，提供了不带任何返回值的修改接口，结构如下:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("chatUpdateNoReply(object: chatUpdateInput, where: chatWhereFilter): Boolean\nchatroomUpdateNoReply(object: chatroomUpdateInput, where: chatroomWhereFilter): Boolean\n")])])]),a("h3",{attrs:{id:"_4-3-4-对象的查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-对象的查找","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.3.4 对象的查找")]),t._v(" "),a("p",[t._v("针对用户定义的每一个对象类型，EasyGQL提供两个查询接口：“对象名s”和“对象名”。")]),t._v(" "),a("h4",{attrs:{id:"_4-3-4-1-对象名s"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-1-对象名s","aria-hidden":"true"}},[t._v("#")]),t._v(' 4.3.4.1 "对象名s"')]),t._v(" "),a("p",[t._v("如下是chats和chatrooms的定义:")]),t._v(" "),a("p",[t._v("chatrooms(first: Int = -1, last: Int = -1, limit: Int = 2147483647, orderby: String, skip: Int = 0, where: chatroomWhereFilter): chatroomwhere_result\nchats(first: Int = -1, last: Int = -1, limit: Int = 2147483647, orderby: String, skip: Int = 0, where: chatWhereFilter): chatwhere_result")]),t._v(" "),a("p",[t._v("在以上定义中：")]),t._v(" "),a("ul",[a("li",[t._v("first表示按照当前排序规则取前xx个要素。")]),t._v(" "),a("li",[t._v("last表示按照当前排序规则取最后xx个要素。")]),t._v(" "),a("li",[t._v("limit表示按照当前排序规则取最多XX个要素。limit不能和first、last共用。")]),t._v(" "),a("li",[t._v("skip表示按照当前排序规则从第XX个元素开始取值。skip不能和first、last共用，skip可以和limit进行组合分页。")]),t._v(" "),a("li",[t._v("orderby表示查询时的排序规则，使用方法如“chatroom,desc”，表示对chatroom进行倒序排列。")]),t._v(" "),a("li",[t._v('"对象名WhereInput“表示对象的过滤条件。')])]),t._v(" "),a("p",[t._v("过滤条件对象“对象名WhereInput”：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("input chatWhereInput {\n  and: chatWhereFilter\n  filter: chatFieldFilter\n  field_contains: [String]\n  not: chatWhereFilter\n  or: chatWhereFilter\n}\ninput chatroomWhereInput {\n  and: chatroomWhereFilter\n  filter: chatroomFieldFilter\n  field_contains: [String]\n  not: chatroomWhereFilter\n  or: chatroomWhereFilter\n}\ninput chatFieldFilter {\n  chatroom: IDFilter\n  from: StringFilter\n  id: IDFilter\n  message: StringFilter\n}\ninput chatroomFieldFilter {\n  id: IDFilter\n  owner: StringFilter\n}\n")])])]),a("p",[t._v("其中：")]),t._v(" "),a("ul",[a("li",[t._v("and,or,not表示对后续过滤条件的与、或、非操作。")]),t._v(" "),a("li",[t._v("field_contains，表示所查询对象必须包含的字段。")]),t._v(" "),a("li",[t._v('"对象名FieldFilter"是所查询对象的字段级过滤条件，根据每个字段所基于的标量类型不一样，查询过滤条件不一样。具体见下表：')])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("标量类型")]),t._v(" "),a("th",[t._v("操作符")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),a("td",[t._v("eq,ne,lt,le,gt,ge,match")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Int")]),t._v(" "),a("td",[t._v("eq,ne,lt,le,gt,ge")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Long")]),t._v(" "),a("td",[t._v("eq,ne,lt,le,gt,ge")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("BigDecimal")]),t._v(" "),a("td",[t._v("eq,ne,lt,le,gt,ge")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ID")]),t._v(" "),a("td",[t._v("eq,ne,lt,le,gt,ge,match")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")]),t._v(" "),a("td",[t._v("istrue")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("List")]),t._v(" "),a("td",[t._v("hasone,none,all")])])])]),t._v(" "),a("p",[t._v("返回结果定义如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type chatroomwhere_result {\n  result: [chatroomOutput]\n}\ntype chatwhere_result {\n  result: [chatOutput]\n}\ntype chatroomOutput {\n  createdat: DateTime @createdat\n  id: ID\n  owner: String\n}\ntype chatOutput {\n  chatroom: chatroomOutput\n  createdat: DateTime @createdat\n  from: String\n  id: ID\n  message: String\n}\n\n")])])]),a("h4",{attrs:{id:"_4-3-4-2-对象名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-2-对象名","aria-hidden":"true"}},[t._v("#")]),t._v(' 4.3.4.2 "对象名"')]),t._v(" "),a("p",[t._v("操作定义如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("chat(id: ID!): chatOutput\nchatroom(id: ID!): chatroomOutput\n")])])]),a("p",[t._v("这是根据ID，返回一个确定对象的方法。")]),t._v(" "),a("h3",{attrs:{id:"_4-3-5-对象的订阅"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-5-对象的订阅","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.3.5 对象的订阅")]),t._v(" "),a("p",[t._v("自定义对象的订阅接口是自定义对象的实时API，能够根据确定的查询条件，返回指定对象的变更。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("chatListener(event: [EventType], where: chatWhereFilter,on:ValueType): chatSubscriptionResult\nchatroomListener(mutationtypes: [String], where: chatroomWhereFilter): chatroomSubscriptionResult\n")])])]),a("p",[t._v("订阅接口的输入参数中：")]),t._v(" "),a("ul",[a("li",[t._v("event是操作类型的列表，有insert、update、delete三种。")]),t._v(" "),a("li",[t._v("where是订阅对象的查询条件。")]),t._v(" "),a("li",[t._v("ValuetType表示监听old_val还是监听new_val。")])]),t._v(" "),a("p",[t._v("返回结果定义如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type chatChangeResult {\n  _typename: String\n  evnenttype:EventType\n  old_val:Chat\n  new_val:Chat\n}\ntype chatroomSubscriptionResult {\n  _typename: String\n  evnenttype:EventType\n  old_val:Chatroome\n  new_val:Chatroom\n}\n")])])]),a("h3",{attrs:{id:"_4-3-6-对象引用字段的处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-6-对象引用字段的处理","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.3.6 对象引用字段的处理")]),t._v(" "),a("p",[t._v("自动为每一个引用字段创建一个方法")])])}],!1,null,null,null);e.default=n.exports}}]);