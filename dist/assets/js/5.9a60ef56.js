(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{332:function(a,r,t){"use strict";t.r(r);var s=t(33),_=Object(s.a)({},(function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"一、introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、introduction"}},[a._v("#")]),a._v(" 一、Introduction")]),a._v(" "),t("p",[a._v("本章主要对GraphQL的一些概念和EasyGQL的特点进行介绍")]),a._v(" "),t("h2",{attrs:{id:"_1-1-graphql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-graphql"}},[a._v("#")]),a._v(" 1.1 GraphQL")]),a._v(" "),t("p",[a._v("GraphQL是一个用于API的查询语言，也是一个满足你数据查询的运行时。GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具[1，https://graphql.cn/]。它是2012年由Facebook创造的一种用于描述CS架构应用中数据模型的能力和要求的语言，它从产生之初就一直在进行演化，目前已经被各种体量的开发团队使用，比如Facebook、Twitter、github、pinterrest等。")]),a._v(" "),t("p",[a._v("GraphQL具有如下设计原则：")]),a._v(" "),t("ul",[t("li",[a._v("层次分明：今时今日的大部分产品开发都涉及到创建和操作视图层次。为了满足应用结构的层次性，每个GraphQL查询也是层次构建的，每个查询和其数据共用了相同的形状，这样的方式在描述数据需求上更为直观。")]),a._v(" "),t("li",[a._v("以产品为中心：不可置辩的说，GraphQL是一种视图需求驱动的语言，因为主要是前端工程师书写它。GraphQL从前端工程师的思想和需求出发，再开发了语言和运行时库以满足这些需求。")]),a._v(" "),t("li",[a._v("强类型：每个GraphQL服务器都会构建一个针对应用的类型系统，查询语句就在这个类型系统上下文中执行。对于一个查询语句，GraphQL工具可以在执行以前通过类型系统检查这个查询语句的语法正确性和查询有效性，譬如在开发期，服务器就能保证返回值的形状和特性。")]),a._v(" "),t("li",[a._v("客户端定制：通过类型系统，GraphQL向客户端通告了自己那些可以被消费的能力。而客户端则专注于如何消费这些能力，其查询语句的粒度是字段级的。在大多数没有GraphQL的CS模型应用中，不同的服务端用不同的脚本和入口决定了返回的数据。而GraphQL查询则会返回客户端要求的数据，不多不少。")]),a._v(" "),t("li",[a._v("内省：GraphQL是内省的，一个GraphQL服务器的类型系统必须能用GraphQL语言自身来查询，本规范将后文描述此特性。GraphQL的内省特性使之能成为建造通用工具和客户端库的强大平台。")])]),a._v(" "),t("p",[a._v("基于这些原则，GraphQL在建造客户端应用的时候就成了强大的生产环境。产品开发者和设计师在高质量工具的支撑下，无需阅读大量文档，只需一点或者无需正式训练就能根据GraphQL服务器建造客户端。当然为了完成这个目的，这些服务器和工具的建造者也必不可少。（注：具体GraphQL介绍参见GraphQL规范）")]),a._v(" "),t("p",[a._v("相比于传统的Restful接口，GraphQL的意义主要体现在以下几个方面。")]),a._v(" "),t("ul",[t("li",[a._v("接口的可重用性。在使用Restful API时，针对不同的查询场景，比如查询一个用户的信息、一个用户的所有博客、一个用户的所有订阅信息时需要使用不同的接口。使用Restful API，可以用一个数据接口方便的满足所有这些查询需求。")]),a._v(" "),t("li",[a._v("数据获取的准确性。在使用Restful API时，我们只能掉固定的接口获取固定格式的数据，这样总是容易获取更多（比实际需要）或少获取数据，很难针对某一次查询设计一个API返回刚刚好的数据。")]),a._v(" "),t("li",[a._v("满足前端快速迭代的需求。在使用Restful API时，前端的快速迭代会给后端开发带来很大的压力。")]),a._v(" "),t("li",[a._v("更方便的后台数据统计，因为GraphQL的使用者，总是请求他们需要的数据，所以后端可以通过分析GraphQL的请求情况，准确的分析各种业务数据的实际价值。")]),a._v(" "),t("li",[a._v("类型系统和格式定义的好处。GraphQL使用强类型系统去定义一个API所提供的服务，所有的类型都事先在GraphQL格式定义中事先约定好了。")])]),a._v(" "),t("h2",{attrs:{id:"_1-2-easygql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-easygql"}},[a._v("#")]),a._v(" 1.2 EasyGQL")]),a._v(" "),t("p",[a._v("EasyGQL（Easy GraphQL）[github网址：https://easygql.github.io/doc/]是由[Zukdoor][https://zukdoor.cloud]于2020年2月份推出的一款多数据库支持的实时GraphQL 引擎。能够让开发者非常方便的进行GraphQL类型定义，并能够为开发者灵活的提供各种类型的graphql接口。在产品功能和类别上与Prisma、Hasura类似，与这些产品相比它主要具有以下特点：")]),a._v(" "),t("h3",{attrs:{id:"_1-2-1-多种数据库支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-多种数据库支持"}},[a._v("#")]),a._v(" 1.2.1 多种数据库支持")]),a._v(" "),t("p",[a._v("目前EasyGQL能够支持的数据库类型已经提供支持的数据库类型有RethinkDB、MongoDB、PostreSQL数据库，未来还将支持MySQL、Cassandra等数据库类型，此外开发者还可以根据自己喜好非常方便地进行开发并支持新的数据库类型。具体见xxx")]),a._v(" "),t("h3",{attrs:{id:"_1-2-2-全方位api支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-全方位api支持"}},[a._v("#")]),a._v(" 1.2.2 全方位API支持")]),a._v(" "),t("p",[a._v("通过EasyGQL框架，开发者可以非常方便地针对各种自定义对象快速生成增删改查接口，并能够为盖对象定义变更订阅接口，当订阅中的结果集中有对象发生变化时。具体见xxx")]),a._v(" "),t("h3",{attrs:{id:"_1-2-3-方便的关系维护"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-方便的关系维护"}},[a._v("#")]),a._v(" 1.2.3 方便的关系维护")]),a._v(" "),t("p",[a._v("EasyGQL支持对象间4种关系的定义（1对1、1对多、多对1、多对多），并且针对1对多和1对1的关系类型，可以支持数据对象间的级联删除。具体见xxx")]),a._v(" "),t("h3",{attrs:{id:"_1-2-4-灵活扩展新功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-灵活扩展新功能"}},[a._v("#")]),a._v(" 1.2.4 灵活扩展新功能")]),a._v(" "),t("p",[a._v("通过EasyGQL,开发者可以非常方便的开发新的接口并集成到框架中去，从而丰富EasyGQL的功能。具体见xxx")]),a._v(" "),t("h3",{attrs:{id:"_1-2-5-快速集成外部接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-快速集成外部接口"}},[a._v("#")]),a._v(" 1.2.5 快速集成外部接口")]),a._v(" "),t("p",[a._v("在EasyGQL中，开发者可以很方便的定义Trigger的功能，当自定义对象种类出现新增、删除货修改时，Trigger会调用开发者事先定义好的外部接口（Restful API）,从而实现和第三方API的集成。")]),a._v(" "),t("h3",{attrs:{id:"_1-2-6-外部schema的整合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-6-外部schema的整合"}},[a._v("#")]),a._v(" 1.2.6 外部Schema的整合")]),a._v(" "),t("p",[a._v("在EasyGQL中，开发者可以添加外部Graphql的端点，EasyGQL会自动识别对应graphl端点的所支持的所有数据类型、API，并且自动整合到现有Schema中去。")]),a._v(" "),t("h3",{attrs:{id:"_1-2-7-灵活的数据访问权限控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-7-灵活的数据访问权限控制"}},[a._v("#")]),a._v(" 1.2.7 灵活的数据访问权限控制")]),a._v(" "),t("p",[a._v("EasyGQL允许开发者在Schema中定义用户的角色，并且针对所有API提供基于角色的访问权限控制，针对自定义对象类型的数据访问API还能够提供基于行级、列级的精确数据访问控制，能够满足一般开发者的大多数使用场景需求。")]),a._v(" "),t("h3",{attrs:{id:"_1-2-8-便捷的部署方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-8-便捷的部署方式"}},[a._v("#")]),a._v(" 1.2.8 便捷的部署方式")]),a._v(" "),t("p",[a._v("ZukDoor团队已经将EasyGQL的运行环境以docker镜像的形式发布在了docker-hub中，您可以非常方便的进行使用。可以通过以下docker compose文件快速试用。")])])}),[],!1,null,null,null);r.default=_.exports}}]);